{"version":3,"sources":["angular:jit:template:src\\app\\pages\\perfil\\perfil.html","angular:jit:style:src\\app\\pages\\perfil\\perfil.css","node_modules/@azure/msal-common/dist/utils/Constants.mjs","node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs","node_modules/@azure/msal-common/dist/error/AuthError.mjs","node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs","node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs","node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs","node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs","node_modules/@azure/msal-common/dist/utils/StringUtils.mjs","node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs","node_modules/@azure/msal-common/dist/url/UrlString.mjs","node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs","node_modules/@azure/msal-common/dist/index-browser.mjs","node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs","node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs","node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs","node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs","node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs","node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs","node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs","node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs","node_modules/@azure/msal-browser/dist/event/EventType.mjs","node_modules/@azure/msal-browser/dist/event/EventMessage.mjs","node_modules/@azure/msal-browser/dist/index.mjs","node_modules/@azure/msal-angular/fesm2020/azure-msal-angular.mjs","src/app/guards/auth.service.ts","src/app/pages/perfil/perfil.ts","src/app/pages/perfil/perfil.spec.ts"],"sourcesContent":["<div class=\"d-flex vh-100 overflow-hidden\">\r\n\r\n<aside class=\"sidebar text-white flex-shrink-0 p-3\" style=\"width:240px\">\r\n  <div class=\"d-flex align-items-center mb-4\">\r\n    <i class=\"bi bi-leaf-fill fs-4 me-2\"></i>\r\n    <span class=\"h5 mb-0\">EcoConstruct</span>\r\n  </div>\r\n\r\n  <nav class=\"nav flex-column\">\r\n\r\n    <small class=\"text-uppercase text-white-50 mb-2\">Principal</small>\r\n\r\n    <a\r\n      routerLink=\"/dashboard\"\r\n      routerLinkActive=\"active\"\r\n      [routerLinkActiveOptions]=\"{ exact: true }\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-speedometer2 me-2\"></i>\r\n      Dashboard\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/gestion-obras\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-building me-2\"></i>\r\n      Gestión de Obras\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/registro-residuos\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-card-checklist me-2\"></i>\r\n      Registro de Residuos\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/transporte\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-truck me-2\"></i>\r\n      Transporte\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/inventario\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-box-seam me-2\"></i>\r\n      Inventario\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/historial-trazabilidad\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-clock-history me-2\"></i>\r\n      Historial y Trazabilidad\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/reportes\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-bar-chart me-2\"></i>\r\n      Reportes\r\n    </a>\r\n\r\n    <hr class=\"border-light\">\r\n\r\n    <small class=\"text-uppercase text-white-50 mb-2\">Sistema</small>\r\n    <a\r\n      routerLink=\"/perfil\"\r\n      routerLinkActive=\"active\"\r\n      class=\"nav-link text-white\"\r\n    >\r\n      <i class=\"bi bi-person-circle me-2\"></i>\r\n      Perfil\r\n    </a>\r\n          <a routerLink=\"/usuarios\"\r\n         routerLinkActive=\"active\"\r\n         class=\"nav-link text-white mt-2\">\r\n        <i class=\"bi bi-people me-2\"></i>Usuarios\r\n    </a>\r\n    <a\r\n      href=\"#\"\r\n      (click)=\"logout()\"\r\n      class=\"nav-link text-white mt-2\"\r\n    >\r\n      <i class=\"bi bi-box-arrow-right me-2\"></i>\r\n      Cerrar Sesión\r\n    </a>\r\n  </nav>\r\n</aside>\r\n\r\n  <main class=\"flex-grow-1 overflow-auto p-4\">\r\n    <!-- Header -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <h2 class=\"h3 mb-1\">Perfil de Usuario</h2>\r\n        <small class=\"text-muted\">Gestiona tu información personal y configuración de cuenta</small>\r\n      </div>\r\n      <button class=\"btn btn-success\">\r\n        <i class=\"bi bi-pencil me-1\"></i>Editar Perfil\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"row gx-4 gy-4\">\r\n\r\n      <div class=\"col-12 col-lg-8\">\r\n        <div class=\"card mb-4 shadow-sm\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"mb-3\">\r\n              <i class=\"bi bi-person-circle me-2\"></i>Información Personal\r\n            </h5>\r\n            <small class=\"text-muted\">\r\n              Datos básicos de tu cuenta en EcoConstruct\r\n            </small>\r\n\r\n            <div class=\"d-flex align-items-center mt-4 mb-3\">\r\n              <img\r\n                [src]=\"user.avatarUrl\"\r\n                alt=\"Avatar\"\r\n                class=\"rounded-circle border me-4\"\r\n                width=\"80\"\r\n                height=\"80\"\r\n              />\r\n              <div>\r\n                <div class=\"fw-bold fs-5\">{{ user.fullName }}</div>\r\n                <div class=\"text-muted small mb-2\">{{ user.email }}</div>\r\n                <span class=\"badge bg-success bg-opacity-10 text-success\">\r\n                  {{ user.role }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <hr/>\r\n\r\n            <form class=\"row g-3\">\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Nombre Completo</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.fullName\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.email\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Teléfono</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.phone\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Cargo</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.position\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Empresa</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.company\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <label class=\"form-label\">Ubicación</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [value]=\"user.location\"\r\n                  readonly\r\n                />\r\n              </div>\r\n              <div class=\"col-12\">\r\n                <label class=\"form-label\">Biografía</label>\r\n                <textarea\r\n                  class=\"form-control\"\r\n                  rows=\"3\"\r\n                  readonly\r\n                ></textarea>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12 col-lg-4\">\r\n\r\n        <div class=\"card mb-4 shadow-sm\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"mb-3\">\r\n              <i class=\"bi bi-bar-chart-line me-2\"></i>Estadísticas\r\n            </h5>\r\n            <ul class=\"list-unstyled mb-0\">\r\n              <li *ngFor=\"let s of stats\" class=\"d-flex justify-content-between\">\r\n                <span>{{ s.label }}</span>\r\n                <strong>{{ s.value }}</strong>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card mb-4 shadow-sm\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"mb-3\">\r\n              <i class=\"bi bi-clock-history me-2\"></i>Actividad Reciente\r\n            </h5>\r\n            <ul class=\"list-unstyled mb-0\">\r\n              <li *ngFor=\"let a of activities\" class=\"mb-3\">\r\n                <div class=\"fw-semibold\">{{ a.title }}</div>\r\n                <small class=\"text-muted d-block\">{{ a.description }}</small>\r\n                <small class=\"text-muted\">{{ a.date }}</small>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card mb-4 shadow-sm\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"mb-3\">\r\n              <i class=\"bi bi-envelope me-2\"></i>Información de Contacto\r\n            </h5>\r\n            <p class=\"mb-2\"><i class=\"bi bi-envelope me-1\"></i>{{ user.email }}</p>\r\n            <p class=\"mb-2\"><i class=\"bi bi-telephone me-1\"></i>{{ user.phone }}</p>\r\n            <p class=\"mb-2\"><i class=\"bi bi-geo-alt me-1\"></i>{{ user.location }}</p>\r\n            <p class=\"mb-0\"><i class=\"bi bi-building me-1\"></i>{{ user.company }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</div>\r\n","/* src/app/pages/perfil/perfil.css */\n.sidebar {\n  width: 240px;\n  background-color: #16a249;\n  color: white;\n  padding: 2rem 1rem;\n  display: flex;\n  flex-direction: column;\n}\n.logo-icon {\n  font-size: 1.5rem;\n}\n.brand {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 2rem;\n}\n.brand-name {\n  font-weight: 700;\n  font-size: 1.2rem;\n}\n.nav-section {\n  flex: 1;\n}\n.nav-section-title {\n  text-transform: uppercase;\n  font-size: 0.75rem;\n  opacity: 0.7;\n  margin: 1rem 0 0.5rem;\n}\n.nav-link {\n  color: white;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.25rem 0;\n  text-decoration: none;\n  transition: opacity .2s;\n}\n.nav-link.active,\n.nav-link:hover {\n  opacity: 0.8;\n}\n.card-body h5 {\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding: .375rem .75rem;\n  margin-bottom: 0;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n  border-radius: .25rem;\n}\n.avatar-placeholder,\n.rounded-circle {\n  object-fit: cover;\n}\nh2.h3 {\n  font-size: 1.75rem;\n  font-weight: 600;\n}\n/*# sourceMappingURL=perfil.css.map */\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    DEFAULT_COMMON_TENANT: \"common\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    DSTS: \"dstsv2\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // CIAM URL\r\n    CIAM_AUTH_URL: \".ciamlogin.com\",\r\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    NOT_APPLICABLE: \"N/A\",\r\n    NOT_AVAILABLE: \"Not Available\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\r\n        \"login.microsoftonline.com\",\r\n        \"login.windows.net\",\r\n        \"login.microsoft.com\",\r\n        \"sts.windows.net\",\r\n    ],\r\n    SHR_NONCE_VALIDITY: 240,\r\n    INVALID_INSTANCE: \"invalid_instance\",\r\n};\r\nconst HttpStatus = {\r\n    SUCCESS: 200,\r\n    SUCCESS_RANGE_START: 200,\r\n    SUCCESS_RANGE_END: 299,\r\n    REDIRECT: 302,\r\n    CLIENT_ERROR: 400,\r\n    CLIENT_ERROR_RANGE_START: 400,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    NOT_FOUND: 404,\r\n    REQUEST_TIMEOUT: 408,\r\n    GONE: 410,\r\n    TOO_MANY_REQUESTS: 429,\r\n    CLIENT_ERROR_RANGE_END: 499,\r\n    SERVER_ERROR: 500,\r\n    SERVER_ERROR_RANGE_START: 500,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    SERVER_ERROR_RANGE_END: 599,\r\n    MULTI_SIDED_ERROR: 600,\r\n};\r\nconst OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE,\r\n];\r\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\r\n/**\r\n * Request header names\r\n */\r\nconst HeaderNames = {\r\n    CONTENT_TYPE: \"Content-Type\",\r\n    CONTENT_LENGTH: \"Content-Length\",\r\n    RETRY_AFTER: \"Retry-After\",\r\n    CCS_HEADER: \"X-AnchorMailbox\",\r\n    WWWAuthenticate: \"WWW-Authenticate\",\r\n    AuthenticationInfo: \"Authentication-Info\",\r\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\r\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\r\n};\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nconst PersistentCacheKeys = {\r\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\r\n};\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nconst AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n/**\r\n * Claims request keys\r\n */\r\nconst ClaimsRequestKeys = {\r\n    ACCESS_TOKEN: \"access_token\",\r\n    XMS_CC: \"xms_cc\",\r\n};\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nconst PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\",\r\n    NO_SESSION: \"no_session\",\r\n};\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nconst CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\",\r\n};\r\n/**\r\n * Allowed values for response_type\r\n */\r\nconst OAuthResponseType = {\r\n    CODE: \"code\",\r\n    IDTOKEN_TOKEN: \"id_token token\",\r\n    IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\",\r\n};\r\n/**\r\n * allowed values for server response type\r\n * @deprecated Use ResponseMode instead\r\n */\r\nconst ServerResponseType = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nconst ResponseMode = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n    FORM_POST: \"form_post\",\r\n};\r\n/**\r\n * allowed grant_type\r\n */\r\nconst GrantType = {\r\n    IMPLICIT_GRANT: \"implicit\",\r\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\r\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\r\n    DEVICE_CODE_GRANT: \"device_code\",\r\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\r\n};\r\n/**\r\n * Account types in Cache\r\n */\r\nconst CacheAccountType = {\r\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\r\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\r\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\r\n};\r\n/**\r\n * Separators used in cache\r\n */\r\nconst Separators = {\r\n    CACHE_KEY_SEPARATOR: \"-\",\r\n    CLIENT_INFO_SEPARATOR: \".\",\r\n};\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nconst CredentialType = {\r\n    ID_TOKEN: \"IdToken\",\r\n    ACCESS_TOKEN: \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN: \"RefreshToken\",\r\n};\r\n/**\r\n * Combine all cache types\r\n */\r\nconst CacheType = {\r\n    ADFS: 1001,\r\n    MSA: 1002,\r\n    MSSTS: 1003,\r\n    GENERIC: 1004,\r\n    ACCESS_TOKEN: 2001,\r\n    REFRESH_TOKEN: 2002,\r\n    ID_TOKEN: 2003,\r\n    APP_METADATA: 3001,\r\n    UNDEFINED: 9999,\r\n};\r\n/**\r\n * More Cache related constants\r\n */\r\nconst APP_METADATA = \"appmetadata\";\r\nconst CLIENT_INFO = \"client_info\";\r\nconst THE_FAMILY_ID = \"1\";\r\nconst AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\r\n};\r\nconst AuthorityMetadataSource = {\r\n    CONFIG: \"config\",\r\n    CACHE: \"cache\",\r\n    NETWORK: \"network\",\r\n    HARDCODED_VALUES: \"hardcoded_values\",\r\n};\r\nconst SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\",\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nconst AuthenticationScheme = {\r\n    BEARER: \"Bearer\",\r\n    POP: \"pop\",\r\n    SSH: \"ssh-cert\",\r\n};\r\n/**\r\n * Constants related to throttling\r\n */\r\nconst ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\r\n};\r\nconst Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nconst PasswordGrantConstants = {\r\n    username: \"username\",\r\n    password: \"password\",\r\n};\r\n/**\r\n * Region Discovery Sources\r\n */\r\nconst RegionDiscoverySources = {\r\n    FAILED_AUTO_DETECTION: \"1\",\r\n    INTERNAL_CACHE: \"2\",\r\n    ENVIRONMENT_VARIABLE: \"3\",\r\n    IMDS: \"4\",\r\n};\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nconst RegionDiscoveryOutcomes = {\r\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\r\n};\r\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\r\nconst CacheOutcome = {\r\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\r\n    NOT_APPLICABLE: \"0\",\r\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\r\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\r\n    // When the token request goes to the identity provider because no cached access token exists\r\n    NO_CACHED_ACCESS_TOKEN: \"2\",\r\n    // When the token request goes to the identity provider because cached access token expired\r\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\r\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\r\n    PROACTIVELY_REFRESHED: \"4\",\r\n};\r\nconst JsonWebTokenTypes = {\r\n    Jwt: \"JWT\",\r\n    Jwk: \"JWK\",\r\n    Pop: \"pop\",\r\n};\r\nconst ONE_DAY_IN_MS = 86400000;\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nconst EncodingTypes = {\r\n    BASE64: \"base64\",\r\n    HEX: \"hex\",\r\n    UTF8: \"utf-8\",\r\n};\n\nexport { AADAuthorityConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, EncodingTypes, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OAuthResponseType, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseMode, SERVER_TELEM_CONSTANTS, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst unexpectedError = \"unexpected_error\";\r\nconst postRequestFailed = \"post_request_failed\";\n\nexport { postRequestFailed, unexpectedError };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { postRequestFailed, unexpectedError } from './AuthErrorCodes.mjs';\nimport * as AuthErrorCodes from './AuthErrorCodes.mjs';\nexport { AuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AuthErrorMessages = {\r\n    [unexpectedError]: \"Unexpected error in authentication.\",\r\n    [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\r\n};\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */\r\nconst AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: unexpectedError,\r\n        desc: AuthErrorMessages[unexpectedError],\r\n    },\r\n    postRequestFailed: {\r\n        code: postRequestFailed,\r\n        desc: AuthErrorMessages[postRequestFailed],\r\n    },\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nclass AuthError extends Error {\r\n    constructor(errorCode, errorMessage, suberror) {\r\n        const errorString = errorMessage\r\n            ? `${errorCode}: ${errorMessage}`\r\n            : errorCode;\r\n        super(errorString);\r\n        Object.setPrototypeOf(this, AuthError.prototype);\r\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\r\n        this.errorMessage = errorMessage || Constants.EMPTY_STRING;\r\n        this.subError = suberror || Constants.EMPTY_STRING;\r\n        this.name = \"AuthError\";\r\n    }\r\n    setCorrelationId(correlationId) {\r\n        this.correlationId = correlationId;\r\n    }\r\n}\r\nfunction createAuthError(code, additionalMessage) {\r\n    return new AuthError(code, additionalMessage\r\n        ? `${AuthErrorMessages[code]} ${additionalMessage}`\r\n        : AuthErrorMessages[code]);\r\n}\n\nexport { AuthError, AuthErrorMessage, AuthErrorMessages, createAuthError };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst clientInfoDecodingError = \"client_info_decoding_error\";\r\nconst clientInfoEmptyError = \"client_info_empty_error\";\r\nconst tokenParsingError = \"token_parsing_error\";\r\nconst nullOrEmptyToken = \"null_or_empty_token\";\r\nconst endpointResolutionError = \"endpoints_resolution_error\";\r\nconst networkError = \"network_error\";\r\nconst openIdConfigError = \"openid_config_error\";\r\nconst hashNotDeserialized = \"hash_not_deserialized\";\r\nconst invalidState = \"invalid_state\";\r\nconst stateMismatch = \"state_mismatch\";\r\nconst stateNotFound = \"state_not_found\";\r\nconst nonceMismatch = \"nonce_mismatch\";\r\nconst authTimeNotFound = \"auth_time_not_found\";\r\nconst maxAgeTranspired = \"max_age_transpired\";\r\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\r\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\r\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\r\nconst requestCannotBeMade = \"request_cannot_be_made\";\r\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\r\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\r\nconst emptyInputScopeSet = \"empty_input_scopeset\";\r\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\r\nconst deviceCodeExpired = \"device_code_expired\";\r\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\r\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\r\nconst invalidCacheRecord = \"invalid_cache_record\";\r\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\r\nconst noAccountFound = \"no_account_found\";\r\nconst noCryptoObject = \"no_crypto_object\";\r\nconst unexpectedCredentialType = \"unexpected_credential_type\";\r\nconst invalidAssertion = \"invalid_assertion\";\r\nconst invalidClientCredential = \"invalid_client_credential\";\r\nconst tokenRefreshRequired = \"token_refresh_required\";\r\nconst userTimeoutReached = \"user_timeout_reached\";\r\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\r\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\r\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\r\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\r\nconst keyIdMissing = \"key_id_missing\";\r\nconst noNetworkConnectivity = \"no_network_connectivity\";\r\nconst userCanceled = \"user_canceled\";\r\nconst missingTenantIdError = \"missing_tenant_id_error\";\r\nconst methodNotImplemented = \"method_not_implemented\";\r\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n\nexport { authTimeNotFound, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, cannotAppendScopeSet, cannotRemoveEmptyScope, clientInfoDecodingError, clientInfoEmptyError, deviceCodeExpired, deviceCodePollingCancelled, deviceCodeUnknownError, emptyInputScopeSet, endSessionEndpointNotSupported, endpointResolutionError, hashNotDeserialized, invalidAssertion, invalidCacheEnvironment, invalidCacheRecord, invalidClientCredential, invalidState, keyIdMissing, maxAgeTranspired, methodNotImplemented, missingTenantIdError, multipleMatchingAccounts, multipleMatchingAppMetadata, multipleMatchingTokens, nestedAppAuthBridgeDisabled, networkError, noAccountFound, noAccountInSilentRequest, noCryptoObject, noNetworkConnectivity, nonceMismatch, nullOrEmptyToken, openIdConfigError, requestCannotBeMade, stateMismatch, stateNotFound, tokenClaimsCnfRequiredForSignedJwt, tokenParsingError, tokenRefreshRequired, unexpectedCredentialType, userCanceled, userTimeoutReached };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { nestedAppAuthBridgeDisabled, missingTenantIdError, userCanceled, noNetworkConnectivity, keyIdMissing, endSessionEndpointNotSupported, bindingKeyNotRemoved, authorizationCodeMissingFromServerResponse, tokenClaimsCnfRequiredForSignedJwt, userTimeoutReached, tokenRefreshRequired, invalidClientCredential, invalidAssertion, unexpectedCredentialType, noCryptoObject, noAccountFound, invalidCacheEnvironment, invalidCacheRecord, noAccountInSilentRequest, deviceCodeUnknownError, deviceCodeExpired, deviceCodePollingCancelled, emptyInputScopeSet, cannotAppendScopeSet, cannotRemoveEmptyScope, requestCannotBeMade, multipleMatchingAppMetadata, multipleMatchingAccounts, multipleMatchingTokens, maxAgeTranspired, authTimeNotFound, nonceMismatch, stateNotFound, stateMismatch, invalidState, hashNotDeserialized, openIdConfigError, networkError, endpointResolutionError, nullOrEmptyToken, tokenParsingError, clientInfoEmptyError, clientInfoDecodingError, methodNotImplemented } from './ClientAuthErrorCodes.mjs';\nimport * as ClientAuthErrorCodes from './ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst ClientAuthErrorMessages = {\r\n    [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\r\n    [clientInfoEmptyError]: \"The client info was empty\",\r\n    [tokenParsingError]: \"Token cannot be parsed\",\r\n    [nullOrEmptyToken]: \"The token is null or empty\",\r\n    [endpointResolutionError]: \"Endpoints cannot be resolved\",\r\n    [networkError]: \"Network request failed\",\r\n    [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\r\n    [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\r\n    [invalidState]: \"State was not the expected format\",\r\n    [stateMismatch]: \"State mismatch error\",\r\n    [stateNotFound]: \"State not found\",\r\n    [nonceMismatch]: \"Nonce mismatch error\",\r\n    [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\r\n    [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\r\n    [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\r\n    [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\r\n    [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\r\n    [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\r\n    [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\r\n    [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\r\n    [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\r\n    [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\r\n    [deviceCodeExpired]: \"Device code is expired.\",\r\n    [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\r\n    [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\r\n    [invalidCacheRecord]: \"Cache record object was null or undefined.\",\r\n    [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\r\n    [noAccountFound]: \"No account found in cache for given key.\",\r\n    [noCryptoObject]: \"No crypto object detected.\",\r\n    [unexpectedCredentialType]: \"Unexpected credential type.\",\r\n    [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\r\n    [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\r\n    [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\r\n    [userTimeoutReached]: \"User defined timeout for device code polling reached\",\r\n    [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\r\n    [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\r\n    [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\r\n    [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\r\n    [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\r\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\r\n    [userCanceled]: \"User cancelled the flow.\",\r\n    [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\r\n    [methodNotImplemented]: \"This method has not been implemented\",\r\n    [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\",\r\n};\r\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\r\nconst ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: clientInfoDecodingError,\r\n        desc: ClientAuthErrorMessages[clientInfoDecodingError],\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: clientInfoEmptyError,\r\n        desc: ClientAuthErrorMessages[clientInfoEmptyError],\r\n    },\r\n    tokenParsingError: {\r\n        code: tokenParsingError,\r\n        desc: ClientAuthErrorMessages[tokenParsingError],\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: nullOrEmptyToken,\r\n        desc: ClientAuthErrorMessages[nullOrEmptyToken],\r\n    },\r\n    endpointResolutionError: {\r\n        code: endpointResolutionError,\r\n        desc: ClientAuthErrorMessages[endpointResolutionError],\r\n    },\r\n    networkError: {\r\n        code: networkError,\r\n        desc: ClientAuthErrorMessages[networkError],\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: openIdConfigError,\r\n        desc: ClientAuthErrorMessages[openIdConfigError],\r\n    },\r\n    hashNotDeserialized: {\r\n        code: hashNotDeserialized,\r\n        desc: ClientAuthErrorMessages[hashNotDeserialized],\r\n    },\r\n    invalidStateError: {\r\n        code: invalidState,\r\n        desc: ClientAuthErrorMessages[invalidState],\r\n    },\r\n    stateMismatchError: {\r\n        code: stateMismatch,\r\n        desc: ClientAuthErrorMessages[stateMismatch],\r\n    },\r\n    stateNotFoundError: {\r\n        code: stateNotFound,\r\n        desc: ClientAuthErrorMessages[stateNotFound],\r\n    },\r\n    nonceMismatchError: {\r\n        code: nonceMismatch,\r\n        desc: ClientAuthErrorMessages[nonceMismatch],\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: authTimeNotFound,\r\n        desc: ClientAuthErrorMessages[authTimeNotFound],\r\n    },\r\n    maxAgeTranspired: {\r\n        code: maxAgeTranspired,\r\n        desc: ClientAuthErrorMessages[maxAgeTranspired],\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: multipleMatchingTokens,\r\n        desc: ClientAuthErrorMessages[multipleMatchingTokens],\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: multipleMatchingAccounts,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAccounts],\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: multipleMatchingAppMetadata,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAppMetadata],\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: requestCannotBeMade,\r\n        desc: ClientAuthErrorMessages[requestCannotBeMade],\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: cannotRemoveEmptyScope,\r\n        desc: ClientAuthErrorMessages[cannotRemoveEmptyScope],\r\n    },\r\n    appendScopeSetError: {\r\n        code: cannotAppendScopeSet,\r\n        desc: ClientAuthErrorMessages[cannotAppendScopeSet],\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: emptyInputScopeSet,\r\n        desc: ClientAuthErrorMessages[emptyInputScopeSet],\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: deviceCodePollingCancelled,\r\n        desc: ClientAuthErrorMessages[deviceCodePollingCancelled],\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: deviceCodeExpired,\r\n        desc: ClientAuthErrorMessages[deviceCodeExpired],\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: deviceCodeUnknownError,\r\n        desc: ClientAuthErrorMessages[deviceCodeUnknownError],\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: noAccountInSilentRequest,\r\n        desc: ClientAuthErrorMessages[noAccountInSilentRequest],\r\n    },\r\n    invalidCacheRecord: {\r\n        code: invalidCacheRecord,\r\n        desc: ClientAuthErrorMessages[invalidCacheRecord],\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: invalidCacheEnvironment,\r\n        desc: ClientAuthErrorMessages[invalidCacheEnvironment],\r\n    },\r\n    noAccountFound: {\r\n        code: noAccountFound,\r\n        desc: ClientAuthErrorMessages[noAccountFound],\r\n    },\r\n    noCryptoObj: {\r\n        code: noCryptoObject,\r\n        desc: ClientAuthErrorMessages[noCryptoObject],\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: unexpectedCredentialType,\r\n        desc: ClientAuthErrorMessages[unexpectedCredentialType],\r\n    },\r\n    invalidAssertion: {\r\n        code: invalidAssertion,\r\n        desc: ClientAuthErrorMessages[invalidAssertion],\r\n    },\r\n    invalidClientCredential: {\r\n        code: invalidClientCredential,\r\n        desc: ClientAuthErrorMessages[invalidClientCredential],\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: tokenRefreshRequired,\r\n        desc: ClientAuthErrorMessages[tokenRefreshRequired],\r\n    },\r\n    userTimeoutReached: {\r\n        code: userTimeoutReached,\r\n        desc: ClientAuthErrorMessages[userTimeoutReached],\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: tokenClaimsCnfRequiredForSignedJwt,\r\n        desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt],\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: authorizationCodeMissingFromServerResponse,\r\n        desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse],\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: bindingKeyNotRemoved,\r\n        desc: ClientAuthErrorMessages[bindingKeyNotRemoved],\r\n    },\r\n    logoutNotSupported: {\r\n        code: endSessionEndpointNotSupported,\r\n        desc: ClientAuthErrorMessages[endSessionEndpointNotSupported],\r\n    },\r\n    keyIdMissing: {\r\n        code: keyIdMissing,\r\n        desc: ClientAuthErrorMessages[keyIdMissing],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: noNetworkConnectivity,\r\n        desc: ClientAuthErrorMessages[noNetworkConnectivity],\r\n    },\r\n    userCanceledError: {\r\n        code: userCanceled,\r\n        desc: ClientAuthErrorMessages[userCanceled],\r\n    },\r\n    missingTenantIdError: {\r\n        code: missingTenantIdError,\r\n        desc: ClientAuthErrorMessages[missingTenantIdError],\r\n    },\r\n    nestedAppAuthBridgeDisabled: {\r\n        code: nestedAppAuthBridgeDisabled,\r\n        desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nclass ClientAuthError extends AuthError {\r\n    constructor(errorCode, additionalMessage) {\r\n        super(errorCode, additionalMessage\r\n            ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\r\n            : ClientAuthErrorMessages[errorCode]);\r\n        this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n}\r\nfunction createClientAuthError(errorCode, additionalMessage) {\r\n    return new ClientAuthError(errorCode, additionalMessage);\r\n}\n\nexport { ClientAuthError, ClientAuthErrorMessage, ClientAuthErrorMessages, createClientAuthError };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst redirectUriEmpty = \"redirect_uri_empty\";\r\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\r\nconst authorityUriInsecure = \"authority_uri_insecure\";\r\nconst urlParseError = \"url_parse_error\";\r\nconst urlEmptyError = \"empty_url_error\";\r\nconst emptyInputScopesError = \"empty_input_scopes_error\";\r\nconst invalidPromptValue = \"invalid_prompt_value\";\r\nconst invalidClaims = \"invalid_claims\";\r\nconst tokenRequestEmpty = \"token_request_empty\";\r\nconst logoutRequestEmpty = \"logout_request_empty\";\r\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\r\nconst pkceParamsMissing = \"pkce_params_missing\";\r\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\r\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\r\nconst untrustedAuthority = \"untrusted_authority\";\r\nconst missingSshJwk = \"missing_ssh_jwk\";\r\nconst missingSshKid = \"missing_ssh_kid\";\r\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\r\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\r\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\r\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\r\nconst authorityMismatch = \"authority_mismatch\";\n\nexport { authorityMismatch, authorityUriInsecure, cannotAllowPlatformBroker, cannotSetOIDCOptions, claimsRequestParsingError, emptyInputScopesError, invalidAuthenticationHeader, invalidAuthorityMetadata, invalidClaims, invalidCloudDiscoveryMetadata, invalidCodeChallengeMethod, invalidPromptValue, logoutRequestEmpty, missingNonceAuthenticationHeader, missingSshJwk, missingSshKid, pkceParamsMissing, redirectUriEmpty, tokenRequestEmpty, untrustedAuthority, urlEmptyError, urlParseError };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { authorityMismatch, cannotAllowPlatformBroker, cannotSetOIDCOptions, invalidAuthenticationHeader, missingNonceAuthenticationHeader, missingSshKid, missingSshJwk, untrustedAuthority, invalidAuthorityMetadata, invalidCloudDiscoveryMetadata, pkceParamsMissing, invalidCodeChallengeMethod, logoutRequestEmpty, tokenRequestEmpty, invalidClaims, invalidPromptValue, emptyInputScopesError, urlEmptyError, urlParseError, authorityUriInsecure, claimsRequestParsingError, redirectUriEmpty } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ClientConfigurationErrorMessages = {\r\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\r\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\r\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\r\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\r\n    [urlEmptyError]: \"URL was empty or null.\",\r\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\r\n    [invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\r\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\r\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\r\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\r\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\r\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\r\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\r\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\r\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\r\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\r\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\r\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\r\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\r\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\r\n    [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\r\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\r\n};\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\r\nconst ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: redirectUriEmpty,\r\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: claimsRequestParsingError,\r\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\r\n    },\r\n    authorityUriInsecure: {\r\n        code: authorityUriInsecure,\r\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\r\n    },\r\n    urlParseError: {\r\n        code: urlParseError,\r\n        desc: ClientConfigurationErrorMessages[urlParseError],\r\n    },\r\n    urlEmptyError: {\r\n        code: urlEmptyError,\r\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\r\n    },\r\n    emptyScopesError: {\r\n        code: emptyInputScopesError,\r\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\r\n    },\r\n    invalidPrompt: {\r\n        code: invalidPromptValue,\r\n        desc: ClientConfigurationErrorMessages[invalidPromptValue],\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: invalidClaims,\r\n        desc: ClientConfigurationErrorMessages[invalidClaims],\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: tokenRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: logoutRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: invalidCodeChallengeMethod,\r\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: pkceParamsMissing,\r\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: invalidCloudDiscoveryMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: invalidAuthorityMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\r\n    },\r\n    untrustedAuthority: {\r\n        code: untrustedAuthority,\r\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\r\n    },\r\n    missingSshJwk: {\r\n        code: missingSshJwk,\r\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\r\n    },\r\n    missingSshKid: {\r\n        code: missingSshKid,\r\n        desc: ClientConfigurationErrorMessages[missingSshKid],\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: missingNonceAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: invalidAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\r\n    },\r\n    cannotSetOIDCOptions: {\r\n        code: cannotSetOIDCOptions,\r\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\r\n    },\r\n    cannotAllowPlatformBroker: {\r\n        code: cannotAllowPlatformBroker,\r\n        desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker],\r\n    },\r\n    authorityMismatch: {\r\n        code: authorityMismatch,\r\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nclass ClientConfigurationError extends AuthError {\r\n    constructor(errorCode) {\r\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n}\r\nfunction createClientConfigurationError(errorCode) {\r\n    return new ClientConfigurationError(errorCode);\r\n}\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nclass StringUtils {\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    static isEmptyObj(strObj) {\r\n        if (strObj) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    }\r\n    static startsWith(str, search) {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n    static endsWith(str, search) {\r\n        return (str.length >= search.length &&\r\n            str.lastIndexOf(search) === str.length - search.length);\r\n    }\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject(query) {\r\n        const obj = {};\r\n        const params = query.split(\"&\");\r\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n        params.forEach((pair) => {\r\n            if (pair.trim()) {\r\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    }\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr) {\r\n        return arr.map((entry) => entry.trim());\r\n    }\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr) {\r\n        return arr.filter((entry) => {\r\n            return !!entry;\r\n        });\r\n    }\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper(str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        // eslint-disable-next-line security/detect-non-literal-regexp\r\n        const regex = new RegExp(pattern\r\n            .replace(/\\\\/g, \"\\\\\\\\\")\r\n            .replace(/\\*/g, \"[^ ]*\")\r\n            .replace(/\\?/g, \"\\\\?\"));\r\n        return regex.test(input);\r\n    }\r\n}\n\nexport { StringUtils };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\r\nfunction stripLeadingHashOrQuery(responseString) {\r\n    if (responseString.startsWith(\"#/\")) {\r\n        return responseString.substring(2);\r\n    }\r\n    else if (responseString.startsWith(\"#\") ||\r\n        responseString.startsWith(\"?\")) {\r\n        return responseString.substring(1);\r\n    }\r\n    return responseString;\r\n}\r\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\r\nfunction getDeserializedResponse(responseString) {\r\n    // Check if given hash is empty\r\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Strip the # or ? symbol if present\r\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\r\n        // Check for known response properties\r\n        if (deserializedHash.code ||\r\n            deserializedHash.ear_jwe ||\r\n            deserializedHash.error ||\r\n            deserializedHash.error_description ||\r\n            deserializedHash.state) {\r\n            return deserializedHash;\r\n        }\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(hashNotDeserialized);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Utility to create a URL from the params map\r\n */\r\nfunction mapToQueryString(parameters, encodeExtraParams = true, extraQueryParameters) {\r\n    const queryParameterArray = new Array();\r\n    parameters.forEach((value, key) => {\r\n        if (!encodeExtraParams &&\r\n            extraQueryParameters &&\r\n            key in extraQueryParameters) {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        }\r\n        else {\r\n            queryParameterArray.push(`${key}=${encodeURIComponent(value)}`);\r\n        }\r\n    });\r\n    return queryParameterArray.join(\"&\");\r\n}\n\nexport { getDeserializedResponse, mapToQueryString, stripLeadingHashOrQuery };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.mjs';\nimport { getDeserializedResponse } from '../utils/UrlUtils.mjs';\nimport { urlEmptyError, urlParseError, authorityUriInsecure } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nclass UrlString {\r\n    get urlString() {\r\n        return this._urlString;\r\n    }\r\n    constructor(url) {\r\n        this._urlString = url;\r\n        if (!this._urlString) {\r\n            // Throws error if url is empty\r\n            throw createClientConfigurationError(urlEmptyError);\r\n        }\r\n        if (!url.includes(\"#\")) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    static canonicalizeUri(url) {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri() {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol ||\r\n            components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw createClientConfigurationError(authorityUriInsecure);\r\n        }\r\n    }\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    static appendQueryString(url, queryString) {\r\n        if (!queryString) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0\r\n            ? `${url}?${queryString}`\r\n            : `${url}&${queryString}`;\r\n    }\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    static removeHashFromUrl(url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId) {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId &&\r\n            pathArray.length !== 0 &&\r\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\r\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents() {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7],\r\n        };\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (urlComponents.QueryString &&\r\n            urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n    static getDomainFromUrl(url) {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        const match = url.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        return match[2];\r\n    }\r\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n            return (baseComponents.Protocol +\r\n                \"//\" +\r\n                baseComponents.HostNameAndPort +\r\n                relativeUrl);\r\n        }\r\n        return relativeUrl;\r\n    }\r\n    static constructAuthorityUriFromObject(urlObject) {\r\n        return new UrlString(urlObject.Protocol +\r\n            \"//\" +\r\n            urlObject.HostNameAndPort +\r\n            \"/\" +\r\n            urlObject.PathSegments.join(\"/\"));\r\n    }\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */\r\n    static hashContainsKnownProperties(response) {\r\n        return !!getDeserializedResponse(response);\r\n    }\r\n}\n\nexport { UrlString };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        try {\r\n            const result = callback(...args);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            return result;\r\n        }\r\n        catch (e) {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        }\r\n    };\r\n};\r\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\r\n        return callback(...args)\r\n            .then((response) => {\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            return response;\r\n        })\r\n            .catch((e) => {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        });\r\n    };\r\n};\n\nexport { invoke, invokeAsync };\n\n","/*! @azure/msal-common v15.8.0 2025-07-01 */\n'use strict';\nexport { AuthorizationCodeClient } from './client/AuthorizationCodeClient.mjs';\nexport { RefreshTokenClient } from './client/RefreshTokenClient.mjs';\nexport { SilentFlowClient } from './client/SilentFlowClient.mjs';\nexport { BaseClient } from './client/BaseClient.mjs';\nexport { DEFAULT_SYSTEM_OPTIONS } from './config/ClientConfiguration.mjs';\nexport { buildTenantProfile, tenantIdMatchesHomeTenant, updateAccountTenantProfileData } from './account/AccountInfo.mjs';\nexport { getTenantIdFromIdTokenClaims } from './account/TokenClaims.mjs';\nexport { CcsCredentialType } from './account/CcsCredential.mjs';\nexport { buildClientInfo, buildClientInfoFromHomeAccountId } from './account/ClientInfo.mjs';\nexport { Authority, buildStaticAuthorityOptions, formatAuthorityUri } from './authority/Authority.mjs';\nexport { AzureCloudInstance } from './authority/AuthorityOptions.mjs';\nexport { AuthorityType } from './authority/AuthorityType.mjs';\nexport { ProtocolMode } from './authority/ProtocolMode.mjs';\nexport { CacheManager, DefaultStorageClass } from './cache/CacheManager.mjs';\nexport { AccountEntity } from './cache/entities/AccountEntity.mjs';\nexport { StubbedNetworkModule } from './network/INetworkModule.mjs';\nexport { ThrottlingUtils } from './network/ThrottlingUtils.mjs';\nexport { getRequestThumbprint } from './network/RequestThumbprint.mjs';\nexport { UrlString } from './url/UrlString.mjs';\nexport { DEFAULT_CRYPTO_IMPLEMENTATION } from './crypto/ICrypto.mjs';\nimport * as Authorize from './protocol/Authorize.mjs';\nexport { Authorize as AuthorizeProtocol };\nimport * as RequestParameterBuilder from './request/RequestParameterBuilder.mjs';\nexport { RequestParameterBuilder };\nexport { ResponseHandler, buildAccountToCache } from './response/ResponseHandler.mjs';\nexport { ScopeSet } from './request/ScopeSet.mjs';\nexport { AuthenticationHeaderParser } from './request/AuthenticationHeaderParser.mjs';\nexport { LogLevel, Logger } from './logger/Logger.mjs';\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, createInteractionRequiredAuthError } from './error/InteractionRequiredAuthError.mjs';\nimport * as InteractionRequiredAuthErrorCodes from './error/InteractionRequiredAuthErrorCodes.mjs';\nexport { InteractionRequiredAuthErrorCodes };\nexport { AuthError, AuthErrorMessage, createAuthError } from './error/AuthError.mjs';\nimport * as AuthErrorCodes from './error/AuthErrorCodes.mjs';\nexport { AuthErrorCodes };\nexport { ServerError } from './error/ServerError.mjs';\nexport { NetworkError, createNetworkError } from './error/NetworkError.mjs';\nexport { CacheError, createCacheError } from './error/CacheError.mjs';\nimport * as CacheErrorCodes from './error/CacheErrorCodes.mjs';\nexport { CacheErrorCodes };\nexport { ClientAuthError, ClientAuthErrorMessage, createClientAuthError } from './error/ClientAuthError.mjs';\nimport * as ClientAuthErrorCodes from './error/ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, createClientConfigurationError } from './error/ClientConfigurationError.mjs';\nimport * as ClientConfigurationErrorCodes from './error/ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\nexport { AADAuthorityConstants, AuthenticationScheme, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, EncodingTypes, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OAuthResponseType, OIDC_DEFAULT_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, ResponseMode, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants } from './utils/Constants.mjs';\nexport { StringUtils } from './utils/StringUtils.mjs';\nexport { ProtocolUtils } from './utils/ProtocolUtils.mjs';\nexport { ServerTelemetryManager } from './telemetry/server/ServerTelemetryManager.mjs';\nexport { version } from './packageMetadata.mjs';\nexport { invoke, invokeAsync } from './utils/FunctionWrappers.mjs';\nimport * as AuthToken from './account/AuthToken.mjs';\nexport { AuthToken };\nimport * as AuthorityFactory from './authority/AuthorityFactory.mjs';\nexport { AuthorityFactory };\nimport * as CacheHelpers from './cache/utils/CacheHelpers.mjs';\nexport { CacheHelpers };\nimport * as TimeUtils from './utils/TimeUtils.mjs';\nexport { TimeUtils };\nimport * as UrlUtils from './utils/UrlUtils.mjs';\nexport { UrlUtils };\nimport * as AADServerParamKeys from './constants/AADServerParamKeys.mjs';\nexport { AADServerParamKeys };\nexport { JoseHeader } from './crypto/JoseHeader.mjs';\nexport { IntFields, PerformanceEventStatus, PerformanceEvents } from './telemetry/performance/PerformanceEvent.mjs';\nexport { PerformanceClient } from './telemetry/performance/PerformanceClient.mjs';\nexport { StubPerformanceClient } from './telemetry/performance/StubPerformanceClient.mjs';\nexport { PopTokenGenerator } from './crypto/PopTokenGenerator.mjs';\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst pkceNotCreated = \"pkce_not_created\";\r\nconst earJwkEmpty = \"ear_jwk_empty\";\r\nconst earJweEmpty = \"ear_jwe_empty\";\r\nconst cryptoNonExistent = \"crypto_nonexistent\";\r\nconst emptyNavigateUri = \"empty_navigate_uri\";\r\nconst hashEmptyError = \"hash_empty_error\";\r\nconst noStateInHash = \"no_state_in_hash\";\r\nconst hashDoesNotContainKnownProperties = \"hash_does_not_contain_known_properties\";\r\nconst unableToParseState = \"unable_to_parse_state\";\r\nconst stateInteractionTypeMismatch = \"state_interaction_type_mismatch\";\r\nconst interactionInProgress = \"interaction_in_progress\";\r\nconst popupWindowError = \"popup_window_error\";\r\nconst emptyWindowError = \"empty_window_error\";\r\nconst userCancelled = \"user_cancelled\";\r\nconst monitorPopupTimeout = \"monitor_popup_timeout\";\r\nconst monitorWindowTimeout = \"monitor_window_timeout\";\r\nconst redirectInIframe = \"redirect_in_iframe\";\r\nconst blockIframeReload = \"block_iframe_reload\";\r\nconst blockNestedPopups = \"block_nested_popups\";\r\nconst iframeClosedPrematurely = \"iframe_closed_prematurely\";\r\nconst silentLogoutUnsupported = \"silent_logout_unsupported\";\r\nconst noAccountError = \"no_account_error\";\r\nconst silentPromptValueError = \"silent_prompt_value_error\";\r\nconst noTokenRequestCacheError = \"no_token_request_cache_error\";\r\nconst unableToParseTokenRequestCacheError = \"unable_to_parse_token_request_cache_error\";\r\nconst authRequestNotSetError = \"auth_request_not_set_error\";\r\nconst invalidCacheType = \"invalid_cache_type\";\r\nconst nonBrowserEnvironment = \"non_browser_environment\";\r\nconst databaseNotOpen = \"database_not_open\";\r\nconst noNetworkConnectivity = \"no_network_connectivity\";\r\nconst postRequestFailed = \"post_request_failed\";\r\nconst getRequestFailed = \"get_request_failed\";\r\nconst failedToParseResponse = \"failed_to_parse_response\";\r\nconst unableToLoadToken = \"unable_to_load_token\";\r\nconst cryptoKeyNotFound = \"crypto_key_not_found\";\r\nconst authCodeRequired = \"auth_code_required\";\r\nconst authCodeOrNativeAccountIdRequired = \"auth_code_or_nativeAccountId_required\";\r\nconst spaCodeAndNativeAccountIdPresent = \"spa_code_and_nativeAccountId_present\";\r\nconst databaseUnavailable = \"database_unavailable\";\r\nconst unableToAcquireTokenFromNativePlatform = \"unable_to_acquire_token_from_native_platform\";\r\nconst nativeHandshakeTimeout = \"native_handshake_timeout\";\r\nconst nativeExtensionNotInstalled = \"native_extension_not_installed\";\r\nconst nativeConnectionNotEstablished = \"native_connection_not_established\";\r\nconst uninitializedPublicClientApplication = \"uninitialized_public_client_application\";\r\nconst nativePromptNotSupported = \"native_prompt_not_supported\";\r\nconst invalidBase64String = \"invalid_base64_string\";\r\nconst invalidPopTokenRequest = \"invalid_pop_token_request\";\r\nconst failedToBuildHeaders = \"failed_to_build_headers\";\r\nconst failedToParseHeaders = \"failed_to_parse_headers\";\r\nconst failedToDecryptEarResponse = \"failed_to_decrypt_ear_response\";\r\nconst timedOut = \"timed_out\";\n\nexport { authCodeOrNativeAccountIdRequired, authCodeRequired, authRequestNotSetError, blockIframeReload, blockNestedPopups, cryptoKeyNotFound, cryptoNonExistent, databaseNotOpen, databaseUnavailable, earJweEmpty, earJwkEmpty, emptyNavigateUri, emptyWindowError, failedToBuildHeaders, failedToDecryptEarResponse, failedToParseHeaders, failedToParseResponse, getRequestFailed, hashDoesNotContainKnownProperties, hashEmptyError, iframeClosedPrematurely, interactionInProgress, invalidBase64String, invalidCacheType, invalidPopTokenRequest, monitorPopupTimeout, monitorWindowTimeout, nativeConnectionNotEstablished, nativeExtensionNotInstalled, nativeHandshakeTimeout, nativePromptNotSupported, noAccountError, noNetworkConnectivity, noStateInHash, noTokenRequestCacheError, nonBrowserEnvironment, pkceNotCreated, popupWindowError, postRequestFailed, redirectInIframe, silentLogoutUnsupported, silentPromptValueError, spaCodeAndNativeAccountIdPresent, stateInteractionTypeMismatch, timedOut, unableToAcquireTokenFromNativePlatform, unableToLoadToken, unableToParseState, unableToParseTokenRequestCacheError, uninitializedPublicClientApplication, userCancelled };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { AuthError } from '@azure/msal-common/browser';\nimport { invalidPopTokenRequest, invalidBase64String, nativePromptNotSupported, uninitializedPublicClientApplication, nativeConnectionNotEstablished, nativeExtensionNotInstalled, nativeHandshakeTimeout, unableToAcquireTokenFromNativePlatform, databaseUnavailable, spaCodeAndNativeAccountIdPresent, authCodeOrNativeAccountIdRequired, authCodeRequired, cryptoKeyNotFound, unableToLoadToken, failedToParseResponse, getRequestFailed, postRequestFailed, noNetworkConnectivity, databaseNotOpen, nonBrowserEnvironment, invalidCacheType, authRequestNotSetError, unableToParseTokenRequestCacheError, noTokenRequestCacheError, silentPromptValueError, noAccountError, silentLogoutUnsupported, iframeClosedPrematurely, blockNestedPopups, blockIframeReload, redirectInIframe, monitorWindowTimeout, monitorPopupTimeout, userCancelled, emptyWindowError, popupWindowError, interactionInProgress, stateInteractionTypeMismatch, unableToParseState, hashDoesNotContainKnownProperties, noStateInHash, hashEmptyError, emptyNavigateUri, cryptoNonExistent, pkceNotCreated, timedOut, failedToDecryptEarResponse, failedToParseHeaders, failedToBuildHeaders, earJweEmpty, earJwkEmpty } from './BrowserAuthErrorCodes.mjs';\nimport * as BrowserAuthErrorCodes from './BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst BrowserAuthErrorMessages = {\r\n    [pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\r\n    [earJwkEmpty]: \"No EAR encryption key provided. This is unexpected.\",\r\n    [earJweEmpty]: \"Server response does not contain ear_jwe property. This is unexpected.\",\r\n    [cryptoNonExistent]: \"The crypto object or function is not available.\",\r\n    [emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\r\n    [hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\r\n    [noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\r\n    [hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\r\n    [unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\r\n    [stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\r\n    [interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\r\n    [popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\r\n    [emptyWindowError]: \"window.open returned null or undefined window object.\",\r\n    [userCancelled]: \"User cancelled the flow.\",\r\n    [monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\r\n    [monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\r\n    [redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\r\n    [blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\r\n    [blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\r\n    [iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\r\n    [silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\r\n    [noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\r\n    [silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\r\n    [noTokenRequestCacheError]: \"No token request found in cache.\",\r\n    [unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\r\n    [authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\r\n    [invalidCacheType]: \"Invalid cache type\",\r\n    [nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\r\n    [databaseNotOpen]: \"Database is not open!\",\r\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\r\n    [postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\r\n    [getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\r\n    [failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\r\n    [unableToLoadToken]: \"Error loading token to cache.\",\r\n    [cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\r\n    [authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\r\n    [authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\r\n    [spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\r\n    [databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\r\n    [unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\r\n    [nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\r\n    [nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\r\n    [nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\r\n    [uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\r\n    [nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\r\n    [invalidBase64String]: \"Invalid base64 encoded string.\",\r\n    [invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\r\n    [failedToBuildHeaders]: \"Failed to build request headers object.\",\r\n    [failedToParseHeaders]: \"Failed to parse response headers\",\r\n    [failedToDecryptEarResponse]: \"Failed to decrypt ear response\",\r\n    [timedOut]: \"The request timed out.\",\r\n};\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */\r\nconst BrowserAuthErrorMessage = {\r\n    pkceNotGenerated: {\r\n        code: pkceNotCreated,\r\n        desc: BrowserAuthErrorMessages[pkceNotCreated],\r\n    },\r\n    cryptoDoesNotExist: {\r\n        code: cryptoNonExistent,\r\n        desc: BrowserAuthErrorMessages[cryptoNonExistent],\r\n    },\r\n    emptyNavigateUriError: {\r\n        code: emptyNavigateUri,\r\n        desc: BrowserAuthErrorMessages[emptyNavigateUri],\r\n    },\r\n    hashEmptyError: {\r\n        code: hashEmptyError,\r\n        desc: BrowserAuthErrorMessages[hashEmptyError],\r\n    },\r\n    hashDoesNotContainStateError: {\r\n        code: noStateInHash,\r\n        desc: BrowserAuthErrorMessages[noStateInHash],\r\n    },\r\n    hashDoesNotContainKnownPropertiesError: {\r\n        code: hashDoesNotContainKnownProperties,\r\n        desc: BrowserAuthErrorMessages[hashDoesNotContainKnownProperties],\r\n    },\r\n    unableToParseStateError: {\r\n        code: unableToParseState,\r\n        desc: BrowserAuthErrorMessages[unableToParseState],\r\n    },\r\n    stateInteractionTypeMismatchError: {\r\n        code: stateInteractionTypeMismatch,\r\n        desc: BrowserAuthErrorMessages[stateInteractionTypeMismatch],\r\n    },\r\n    interactionInProgress: {\r\n        code: interactionInProgress,\r\n        desc: BrowserAuthErrorMessages[interactionInProgress],\r\n    },\r\n    popupWindowError: {\r\n        code: popupWindowError,\r\n        desc: BrowserAuthErrorMessages[popupWindowError],\r\n    },\r\n    emptyWindowError: {\r\n        code: emptyWindowError,\r\n        desc: BrowserAuthErrorMessages[emptyWindowError],\r\n    },\r\n    userCancelledError: {\r\n        code: userCancelled,\r\n        desc: BrowserAuthErrorMessages[userCancelled],\r\n    },\r\n    monitorPopupTimeoutError: {\r\n        code: monitorPopupTimeout,\r\n        desc: BrowserAuthErrorMessages[monitorPopupTimeout],\r\n    },\r\n    monitorIframeTimeoutError: {\r\n        code: monitorWindowTimeout,\r\n        desc: BrowserAuthErrorMessages[monitorWindowTimeout],\r\n    },\r\n    redirectInIframeError: {\r\n        code: redirectInIframe,\r\n        desc: BrowserAuthErrorMessages[redirectInIframe],\r\n    },\r\n    blockTokenRequestsInHiddenIframeError: {\r\n        code: blockIframeReload,\r\n        desc: BrowserAuthErrorMessages[blockIframeReload],\r\n    },\r\n    blockAcquireTokenInPopupsError: {\r\n        code: blockNestedPopups,\r\n        desc: BrowserAuthErrorMessages[blockNestedPopups],\r\n    },\r\n    iframeClosedPrematurelyError: {\r\n        code: iframeClosedPrematurely,\r\n        desc: BrowserAuthErrorMessages[iframeClosedPrematurely],\r\n    },\r\n    silentLogoutUnsupportedError: {\r\n        code: silentLogoutUnsupported,\r\n        desc: BrowserAuthErrorMessages[silentLogoutUnsupported],\r\n    },\r\n    noAccountError: {\r\n        code: noAccountError,\r\n        desc: BrowserAuthErrorMessages[noAccountError],\r\n    },\r\n    silentPromptValueError: {\r\n        code: silentPromptValueError,\r\n        desc: BrowserAuthErrorMessages[silentPromptValueError],\r\n    },\r\n    noTokenRequestCacheError: {\r\n        code: noTokenRequestCacheError,\r\n        desc: BrowserAuthErrorMessages[noTokenRequestCacheError],\r\n    },\r\n    unableToParseTokenRequestCacheError: {\r\n        code: unableToParseTokenRequestCacheError,\r\n        desc: BrowserAuthErrorMessages[unableToParseTokenRequestCacheError],\r\n    },\r\n    authRequestNotSet: {\r\n        code: authRequestNotSetError,\r\n        desc: BrowserAuthErrorMessages[authRequestNotSetError],\r\n    },\r\n    invalidCacheType: {\r\n        code: invalidCacheType,\r\n        desc: BrowserAuthErrorMessages[invalidCacheType],\r\n    },\r\n    notInBrowserEnvironment: {\r\n        code: nonBrowserEnvironment,\r\n        desc: BrowserAuthErrorMessages[nonBrowserEnvironment],\r\n    },\r\n    databaseNotOpen: {\r\n        code: databaseNotOpen,\r\n        desc: BrowserAuthErrorMessages[databaseNotOpen],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: noNetworkConnectivity,\r\n        desc: BrowserAuthErrorMessages[noNetworkConnectivity],\r\n    },\r\n    postRequestFailed: {\r\n        code: postRequestFailed,\r\n        desc: BrowserAuthErrorMessages[postRequestFailed],\r\n    },\r\n    getRequestFailed: {\r\n        code: getRequestFailed,\r\n        desc: BrowserAuthErrorMessages[getRequestFailed],\r\n    },\r\n    failedToParseNetworkResponse: {\r\n        code: failedToParseResponse,\r\n        desc: BrowserAuthErrorMessages[failedToParseResponse],\r\n    },\r\n    unableToLoadTokenError: {\r\n        code: unableToLoadToken,\r\n        desc: BrowserAuthErrorMessages[unableToLoadToken],\r\n    },\r\n    signingKeyNotFoundInStorage: {\r\n        code: cryptoKeyNotFound,\r\n        desc: BrowserAuthErrorMessages[cryptoKeyNotFound],\r\n    },\r\n    authCodeRequired: {\r\n        code: authCodeRequired,\r\n        desc: BrowserAuthErrorMessages[authCodeRequired],\r\n    },\r\n    authCodeOrNativeAccountRequired: {\r\n        code: authCodeOrNativeAccountIdRequired,\r\n        desc: BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired],\r\n    },\r\n    spaCodeAndNativeAccountPresent: {\r\n        code: spaCodeAndNativeAccountIdPresent,\r\n        desc: BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent],\r\n    },\r\n    databaseUnavailable: {\r\n        code: databaseUnavailable,\r\n        desc: BrowserAuthErrorMessages[databaseUnavailable],\r\n    },\r\n    unableToAcquireTokenFromNativePlatform: {\r\n        code: unableToAcquireTokenFromNativePlatform,\r\n        desc: BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform],\r\n    },\r\n    nativeHandshakeTimeout: {\r\n        code: nativeHandshakeTimeout,\r\n        desc: BrowserAuthErrorMessages[nativeHandshakeTimeout],\r\n    },\r\n    nativeExtensionNotInstalled: {\r\n        code: nativeExtensionNotInstalled,\r\n        desc: BrowserAuthErrorMessages[nativeExtensionNotInstalled],\r\n    },\r\n    nativeConnectionNotEstablished: {\r\n        code: nativeConnectionNotEstablished,\r\n        desc: BrowserAuthErrorMessages[nativeConnectionNotEstablished],\r\n    },\r\n    uninitializedPublicClientApplication: {\r\n        code: uninitializedPublicClientApplication,\r\n        desc: BrowserAuthErrorMessages[uninitializedPublicClientApplication],\r\n    },\r\n    nativePromptNotSupported: {\r\n        code: nativePromptNotSupported,\r\n        desc: BrowserAuthErrorMessages[nativePromptNotSupported],\r\n    },\r\n    invalidBase64StringError: {\r\n        code: invalidBase64String,\r\n        desc: BrowserAuthErrorMessages[invalidBase64String],\r\n    },\r\n    invalidPopTokenRequest: {\r\n        code: invalidPopTokenRequest,\r\n        desc: BrowserAuthErrorMessages[invalidPopTokenRequest],\r\n    },\r\n};\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nclass BrowserAuthError extends AuthError {\r\n    constructor(errorCode, subError) {\r\n        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\r\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\r\n        this.name = \"BrowserAuthError\";\r\n    }\r\n}\r\nfunction createBrowserAuthError(errorCode, subError) {\r\n    return new BrowserAuthError(errorCode, subError);\r\n}\n\nexport { BrowserAuthError, BrowserAuthErrorMessage, BrowserAuthErrorMessages, createBrowserAuthError };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common/browser';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Constants\r\n */\r\nconst BrowserConstants = {\r\n    /**\r\n     * Invalid grant error code\r\n     */\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    /**\r\n     * Default popup window width\r\n     */\r\n    POPUP_WIDTH: 483,\r\n    /**\r\n     * Default popup window height\r\n     */\r\n    POPUP_HEIGHT: 600,\r\n    /**\r\n     * Name of the popup window starts with\r\n     */\r\n    POPUP_NAME_PREFIX: \"msal\",\r\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */\r\n    DEFAULT_POLL_INTERVAL_MS: 30,\r\n    /**\r\n     * Msal-browser SKU\r\n     */\r\n    MSAL_SKU: \"msal.js.browser\",\r\n};\r\nconst PlatformAuthConstants = {\r\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\r\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\r\n    MATS_TELEMETRY: \"MATS\",\r\n    MICROSOFT_ENTRA_BROKERID: \"MicrosoftEntra\",\r\n    DOM_API_NAME: \"DOM API\",\r\n    PLATFORM_DOM_APIS: \"get-token-and-sign-out\",\r\n    PLATFORM_DOM_PROVIDER: \"PlatformAuthDOMHandler\",\r\n    PLATFORM_EXTENSION_PROVIDER: \"PlatformAuthExtensionHandler\",\r\n};\r\nconst NativeExtensionMethod = {\r\n    HandshakeRequest: \"Handshake\",\r\n    HandshakeResponse: \"HandshakeResponse\",\r\n    GetToken: \"GetToken\",\r\n    Response: \"Response\",\r\n};\r\nconst BrowserCacheLocation = {\r\n    LocalStorage: \"localStorage\",\r\n    SessionStorage: \"sessionStorage\",\r\n    MemoryStorage: \"memoryStorage\",\r\n};\r\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\r\nconst HTTP_REQUEST_TYPE = {\r\n    GET: \"GET\",\r\n    POST: \"POST\",\r\n};\r\nconst INTERACTION_TYPE = {\r\n    SIGNIN: \"signin\",\r\n    SIGNOUT: \"signout\",\r\n};\r\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\r\nconst TemporaryCacheKeys = {\r\n    ORIGIN_URI: \"request.origin\",\r\n    URL_HASH: \"urlHash\",\r\n    REQUEST_PARAMS: \"request.params\",\r\n    VERIFIER: \"code.verifier\",\r\n    INTERACTION_STATUS_KEY: \"interaction.status\",\r\n    NATIVE_REQUEST: \"request.native\",\r\n};\r\nconst StaticCacheKeys = {\r\n    ACCOUNT_KEYS: \"msal.account.keys\",\r\n    TOKEN_KEYS: \"msal.token.keys\",\r\n    VERSION: \"msal.version\",\r\n};\r\n/**\r\n * Cache keys stored in-memory\r\n */\r\nconst InMemoryCacheKeys = {\r\n    WRAPPER_SKU: \"wrapper.sku\",\r\n    WRAPPER_VER: \"wrapper.version\",\r\n};\r\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nconst ApiId = {\r\n    acquireTokenRedirect: 861,\r\n    acquireTokenPopup: 862,\r\n    ssoSilent: 863,\r\n    acquireTokenSilent_authCode: 864,\r\n    handleRedirectPromise: 865,\r\n    acquireTokenByCode: 866,\r\n    acquireTokenSilent_silentFlow: 61,\r\n    logout: 961,\r\n    logoutPopup: 962,\r\n};\r\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\r\nvar InteractionType;\r\n(function (InteractionType) {\r\n    InteractionType[\"Redirect\"] = \"redirect\";\r\n    InteractionType[\"Popup\"] = \"popup\";\r\n    InteractionType[\"Silent\"] = \"silent\";\r\n    InteractionType[\"None\"] = \"none\";\r\n})(InteractionType || (InteractionType = {}));\r\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\r\nconst InteractionStatus = {\r\n    /**\r\n     * Initial status before interaction occurs\r\n     */\r\n    Startup: \"startup\",\r\n    /**\r\n     * Status set when all login calls occuring\r\n     */\r\n    Login: \"login\",\r\n    /**\r\n     * Status set when logout call occuring\r\n     */\r\n    Logout: \"logout\",\r\n    /**\r\n     * Status set for acquireToken calls\r\n     */\r\n    AcquireToken: \"acquireToken\",\r\n    /**\r\n     * Status set for ssoSilent calls\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */\r\n    HandleRedirect: \"handleRedirect\",\r\n    /**\r\n     * Status set when interaction is complete\r\n     */\r\n    None: \"none\",\r\n};\r\nconst DEFAULT_REQUEST = {\r\n    scopes: OIDC_DEFAULT_SCOPES,\r\n};\r\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\r\nconst KEY_FORMAT_JWK = \"jwk\";\r\n// Supported wrapper SKUs\r\nconst WrapperSKU = {\r\n    React: \"@azure/msal-react\",\r\n    Angular: \"@azure/msal-angular\",\r\n};\r\n// DatabaseStorage Constants\r\nconst DB_NAME = \"msal.db\";\r\nconst DB_VERSION = 1;\r\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\r\nconst CacheLookupPolicy = {\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */\r\n    Default: 0,\r\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */\r\n    AccessToken: 1,\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */\r\n    AccessTokenAndRefreshToken: 2,\r\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */\r\n    RefreshToken: 3,\r\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */\r\n    RefreshTokenAndNetwork: 4,\r\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */\r\n    Skip: 5,\r\n};\r\nconst iFrameRenewalPolicies = [\r\n    CacheLookupPolicy.Default,\r\n    CacheLookupPolicy.Skip,\r\n    CacheLookupPolicy.RefreshTokenAndNetwork,\r\n];\r\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\r\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\r\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\r\nconst PLATFORM_AUTH_DOM_SUPPORT = \"msal.browser.platform.auth.dom\";\n\nexport { ApiId, BROWSER_PERF_ENABLED_KEY, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, INTERACTION_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY, NativeExtensionMethod, PLATFORM_AUTH_DOM_SUPPORT, PlatformAuthConstants, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU, iFrameRenewalPolicies };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { PerformanceEvents } from '@azure/msal-common/browser';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\nimport { urlEncodeArr, base64Encode } from '../encode/Base64Encode.mjs';\nimport { base64DecToArr, base64Decode } from '../encode/Base64Decode.mjs';\nimport { nonBrowserEnvironment, cryptoNonExistent, failedToDecryptEarResponse } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This file defines functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// Algorithms\r\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\nconst AES_GCM = \"AES-GCM\";\r\nconst HKDF = \"HKDF\";\r\n// SHA-256 hashing algorithm\r\nconst S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nconst MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\r\n// UUID hex digits\r\nconst UUID_CHARS = \"0123456789abcdef\";\r\n// Array to store UINT32 random value\r\nconst UINT32_ARR = new Uint32Array(1);\r\n// Key Format\r\nconst RAW = \"raw\";\r\n// Key Usages\r\nconst ENCRYPT = \"encrypt\";\r\nconst DECRYPT = \"decrypt\";\r\nconst DERIVE_KEY = \"deriveKey\";\r\n// Suberror\r\nconst SUBTLE_SUBERROR = \"crypto_subtle_undefined\";\r\nconst keygenAlgorithmOptions = {\r\n    name: PKCS1_V15_KEYGEN_ALG,\r\n    hash: S256_HASH_ALG,\r\n    modulusLength: MODULUS_LENGTH,\r\n    publicExponent: PUBLIC_EXPONENT,\r\n};\r\n/**\r\n * Check whether browser crypto is available.\r\n */\r\nfunction validateCryptoAvailable(skipValidateSubtleCrypto) {\r\n    if (!window) {\r\n        throw createBrowserAuthError(nonBrowserEnvironment);\r\n    }\r\n    if (!window.crypto) {\r\n        throw createBrowserAuthError(cryptoNonExistent);\r\n    }\r\n    if (!skipValidateSubtleCrypto && !window.crypto.subtle) {\r\n        throw createBrowserAuthError(cryptoNonExistent, SUBTLE_SUBERROR);\r\n    }\r\n}\r\n/**\r\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n * @param dataString {string} data string\r\n * @param performanceClient {?IPerformanceClient}\r\n * @param correlationId {?string} correlation id\r\n */\r\nasync function sha256Digest(dataString, performanceClient, correlationId) {\r\n    performanceClient?.addQueueMeasurement(PerformanceEvents.Sha256Digest, correlationId);\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(dataString);\r\n    return window.crypto.subtle.digest(S256_HASH_ALG, data);\r\n}\r\n/**\r\n * Populates buffer with cryptographically random values.\r\n * @param dataBuffer\r\n */\r\nfunction getRandomValues(dataBuffer) {\r\n    return window.crypto.getRandomValues(dataBuffer);\r\n}\r\n/**\r\n * Returns random Uint32 value.\r\n * @returns {number}\r\n */\r\nfunction getRandomUint32() {\r\n    window.crypto.getRandomValues(UINT32_ARR);\r\n    return UINT32_ARR[0];\r\n}\r\n/**\r\n * Creates a UUID v7 from the current timestamp.\r\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\r\n * @returns {number}\r\n */\r\nfunction createNewGuid() {\r\n    const currentTimestamp = Date.now();\r\n    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\r\n    // Result byte array\r\n    const bytes = new Uint8Array(16);\r\n    // A 12-bit `rand_a` field value\r\n    const randA = Math.trunc(baseRand / 2 ** 30);\r\n    // The higher 30 bits of 62-bit `rand_b` field value\r\n    const randBHi = baseRand & (2 ** 30 - 1);\r\n    // The lower 32 bits of 62-bit `rand_b` field value\r\n    const randBLo = getRandomUint32();\r\n    bytes[0] = currentTimestamp / 2 ** 40;\r\n    bytes[1] = currentTimestamp / 2 ** 32;\r\n    bytes[2] = currentTimestamp / 2 ** 24;\r\n    bytes[3] = currentTimestamp / 2 ** 16;\r\n    bytes[4] = currentTimestamp / 2 ** 8;\r\n    bytes[5] = currentTimestamp;\r\n    bytes[6] = 0x70 | (randA >>> 8);\r\n    bytes[7] = randA;\r\n    bytes[8] = 0x80 | (randBHi >>> 24);\r\n    bytes[9] = randBHi >>> 16;\r\n    bytes[10] = randBHi >>> 8;\r\n    bytes[11] = randBHi;\r\n    bytes[12] = randBLo >>> 24;\r\n    bytes[13] = randBLo >>> 16;\r\n    bytes[14] = randBLo >>> 8;\r\n    bytes[15] = randBLo;\r\n    let text = \"\";\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        text += UUID_CHARS.charAt(bytes[i] >>> 4);\r\n        text += UUID_CHARS.charAt(bytes[i] & 0xf);\r\n        if (i === 3 || i === 5 || i === 7 || i === 9) {\r\n            text += \"-\";\r\n        }\r\n    }\r\n    return text;\r\n}\r\n/**\r\n * Generates a keypair based on current keygen algorithm config.\r\n * @param extractable\r\n * @param usages\r\n */\r\nasync function generateKeyPair(extractable, usages) {\r\n    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\r\n}\r\n/**\r\n * Export key as Json Web Key (JWK)\r\n * @param key\r\n */\r\nasync function exportJwk(key) {\r\n    return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\r\n}\r\n/**\r\n * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n * @param key\r\n * @param extractable\r\n * @param usages\r\n */\r\nasync function importJwk(key, extractable, usages) {\r\n    return window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\r\n}\r\n/**\r\n * Signs given data with given key\r\n * @param key\r\n * @param data\r\n */\r\nasync function sign(key, data) {\r\n    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\r\n}\r\n/**\r\n * Generates Base64 encoded jwk used in the Encrypted Authorize Response (EAR) flow\r\n */\r\nasync function generateEarKey() {\r\n    const key = await generateBaseKey();\r\n    const keyStr = urlEncodeArr(new Uint8Array(key));\r\n    const jwk = {\r\n        alg: \"dir\",\r\n        kty: \"oct\",\r\n        k: keyStr,\r\n    };\r\n    return base64Encode(JSON.stringify(jwk));\r\n}\r\n/**\r\n * Parses earJwk for encryption key and returns CryptoKey object\r\n * @param earJwk\r\n * @returns\r\n */\r\nasync function importEarKey(earJwk) {\r\n    const b64DecodedJwk = base64Decode(earJwk);\r\n    const jwkJson = JSON.parse(b64DecodedJwk);\r\n    const rawKey = jwkJson.k;\r\n    const keyBuffer = base64DecToArr(rawKey);\r\n    return window.crypto.subtle.importKey(RAW, keyBuffer, AES_GCM, false, [\r\n        DECRYPT,\r\n    ]);\r\n}\r\n/**\r\n * Decrypt ear_jwe response returned in the Encrypted Authorize Response (EAR) flow\r\n * @param earJwk\r\n * @param earJwe\r\n * @returns\r\n */\r\nasync function decryptEarResponse(earJwk, earJwe) {\r\n    const earJweParts = earJwe.split(\".\");\r\n    if (earJweParts.length !== 5) {\r\n        throw createBrowserAuthError(failedToDecryptEarResponse, \"jwe_length\");\r\n    }\r\n    const key = await importEarKey(earJwk).catch(() => {\r\n        throw createBrowserAuthError(failedToDecryptEarResponse, \"import_key\");\r\n    });\r\n    try {\r\n        const header = new TextEncoder().encode(earJweParts[0]);\r\n        const iv = base64DecToArr(earJweParts[2]);\r\n        const ciphertext = base64DecToArr(earJweParts[3]);\r\n        const tag = base64DecToArr(earJweParts[4]);\r\n        const tagLengthBits = tag.byteLength * 8;\r\n        // Concat ciphertext and tag\r\n        const encryptedData = new Uint8Array(ciphertext.length + tag.length);\r\n        encryptedData.set(ciphertext);\r\n        encryptedData.set(tag, ciphertext.length);\r\n        const decryptedData = await window.crypto.subtle.decrypt({\r\n            name: AES_GCM,\r\n            iv: iv,\r\n            tagLength: tagLengthBits,\r\n            additionalData: header,\r\n        }, key, encryptedData);\r\n        return new TextDecoder().decode(decryptedData);\r\n    }\r\n    catch (e) {\r\n        throw createBrowserAuthError(failedToDecryptEarResponse, \"decrypt\");\r\n    }\r\n}\r\n/**\r\n * Generates symmetric base encryption key. This may be stored as all encryption/decryption keys will be derived from this one.\r\n */\r\nasync function generateBaseKey() {\r\n    const key = await window.crypto.subtle.generateKey({\r\n        name: AES_GCM,\r\n        length: 256,\r\n    }, true, [ENCRYPT, DECRYPT]);\r\n    return window.crypto.subtle.exportKey(RAW, key);\r\n}\r\n/**\r\n * Returns the raw key to be passed into the key derivation function\r\n * @param baseKey\r\n * @returns\r\n */\r\nasync function generateHKDF(baseKey) {\r\n    return window.crypto.subtle.importKey(RAW, baseKey, HKDF, false, [\r\n        DERIVE_KEY,\r\n    ]);\r\n}\r\n/**\r\n * Given a base key and a nonce generates a derived key to be used in encryption and decryption.\r\n * Note: every time we encrypt a new key is derived\r\n * @param baseKey\r\n * @param nonce\r\n * @returns\r\n */\r\nasync function deriveKey(baseKey, nonce, context) {\r\n    return window.crypto.subtle.deriveKey({\r\n        name: HKDF,\r\n        salt: nonce,\r\n        hash: S256_HASH_ALG,\r\n        info: new TextEncoder().encode(context),\r\n    }, baseKey, { name: AES_GCM, length: 256 }, false, [ENCRYPT, DECRYPT]);\r\n}\r\n/**\r\n * Encrypt the given data given a base key. Returns encrypted data and a nonce that must be provided during decryption\r\n * @param key\r\n * @param rawData\r\n */\r\nasync function encrypt(baseKey, rawData, context) {\r\n    const encodedData = new TextEncoder().encode(rawData);\r\n    // The nonce must never be reused with a given key.\r\n    const nonce = window.crypto.getRandomValues(new Uint8Array(16));\r\n    const derivedKey = await deriveKey(baseKey, nonce, context);\r\n    const encryptedData = await window.crypto.subtle.encrypt({\r\n        name: AES_GCM,\r\n        iv: new Uint8Array(12), // New key is derived for every encrypt so we don't need a new nonce\r\n    }, derivedKey, encodedData);\r\n    return {\r\n        data: urlEncodeArr(new Uint8Array(encryptedData)),\r\n        nonce: urlEncodeArr(nonce),\r\n    };\r\n}\r\n/**\r\n * Decrypt data with the given key and nonce\r\n * @param key\r\n * @param nonce\r\n * @param encryptedData\r\n * @returns\r\n */\r\nasync function decrypt(baseKey, nonce, context, encryptedData) {\r\n    const encodedData = base64DecToArr(encryptedData);\r\n    const derivedKey = await deriveKey(baseKey, base64DecToArr(nonce), context);\r\n    const decryptedData = await window.crypto.subtle.decrypt({\r\n        name: AES_GCM,\r\n        iv: new Uint8Array(12), // New key is derived for every encrypt so we don't need a new nonce\r\n    }, derivedKey, encodedData);\r\n    return new TextDecoder().decode(decryptedData);\r\n}\r\n/**\r\n * Returns the SHA-256 hash of an input string\r\n * @param plainText\r\n */\r\nasync function hashString(plainText) {\r\n    const hashBuffer = await sha256Digest(plainText);\r\n    const hashBytes = new Uint8Array(hashBuffer);\r\n    return urlEncodeArr(hashBytes);\r\n}\n\nexport { createNewGuid, decrypt, decryptEarResponse, encrypt, exportJwk, generateBaseKey, generateEarKey, generateHKDF, generateKeyPair, getRandomValues, hashString, importEarKey, importJwk, sha256Digest, sign, validateCryptoAvailable };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst storageNotSupported = \"storage_not_supported\";\r\nconst stubbedPublicClientApplicationCalled = \"stubbed_public_client_application_called\";\r\nconst inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\n\nexport { inMemRedirectUnavailable, storageNotSupported, stubbedPublicClientApplicationCalled };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { AuthError } from '@azure/msal-common/browser';\nimport { inMemRedirectUnavailable, stubbedPublicClientApplicationCalled, storageNotSupported } from './BrowserConfigurationAuthErrorCodes.mjs';\nimport * as BrowserConfigurationAuthErrorCodes from './BrowserConfigurationAuthErrorCodes.mjs';\nexport { BrowserConfigurationAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst BrowserConfigurationAuthErrorMessages = {\r\n    [storageNotSupported]: \"Given storage configuration option was not supported.\",\r\n    [stubbedPublicClientApplicationCalled]: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\r\n    [inMemRedirectUnavailable]: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\",\r\n};\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use BrowserAuthErrorCodes instead\r\n */\r\nconst BrowserConfigurationAuthErrorMessage = {\r\n    storageNotSupportedError: {\r\n        code: storageNotSupported,\r\n        desc: BrowserConfigurationAuthErrorMessages[storageNotSupported],\r\n    },\r\n    stubPcaInstanceCalled: {\r\n        code: stubbedPublicClientApplicationCalled,\r\n        desc: BrowserConfigurationAuthErrorMessages[stubbedPublicClientApplicationCalled],\r\n    },\r\n    inMemRedirectUnavailable: {\r\n        code: inMemRedirectUnavailable,\r\n        desc: BrowserConfigurationAuthErrorMessages[inMemRedirectUnavailable],\r\n    },\r\n};\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nclass BrowserConfigurationAuthError extends AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"BrowserConfigurationAuthError\";\r\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\r\n    }\r\n}\r\nfunction createBrowserConfigurationAuthError(errorCode) {\r\n    return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);\r\n}\n\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage, BrowserConfigurationAuthErrorMessages, createBrowserConfigurationAuthError };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { UrlString } from '@azure/msal-common/browser';\nexport { invoke, invokeAsync } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, BrowserCacheLocation } from './BrowserConstants.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\nimport { inMemRedirectUnavailable } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Clears hash from window url.\r\n */\r\nfunction clearHash(contentWindow) {\r\n    // Office.js sets history.replaceState to null\r\n    contentWindow.location.hash = \"\";\r\n    if (typeof contentWindow.history.replaceState === \"function\") {\r\n        // Full removes \"#\" from url\r\n        contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\r\n    }\r\n}\r\n/**\r\n * Replaces current hash with hash from provided url\r\n */\r\nfunction replaceHash(url) {\r\n    const urlParts = url.split(\"#\");\r\n    urlParts.shift(); // Remove part before the hash\r\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\r\n}\r\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */\r\nfunction isInIframe() {\r\n    return window.parent !== window;\r\n}\r\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */\r\nfunction isInPopup() {\r\n    return (typeof window !== \"undefined\" &&\r\n        !!window.opener &&\r\n        window.opener !== window &&\r\n        typeof window.name === \"string\" &&\r\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0);\r\n}\r\n// #endregion\r\n/**\r\n * Returns current window URL as redirect uri\r\n */\r\nfunction getCurrentUri() {\r\n    return typeof window !== \"undefined\" && window.location\r\n        ? window.location.href.split(\"?\")[0].split(\"#\")[0]\r\n        : \"\";\r\n}\r\n/**\r\n * Gets the homepage url for the current window location.\r\n */\r\nfunction getHomepage() {\r\n    const currentUrl = new UrlString(window.location.href);\r\n    const urlComponents = currentUrl.getUrlComponents();\r\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\r\n}\r\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */\r\nfunction blockReloadInHiddenIframes() {\r\n    const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\r\n    // return an error if called from the hidden iframe created by the msal js silent calls\r\n    if (isResponseHash && isInIframe()) {\r\n        throw createBrowserAuthError(blockIframeReload);\r\n    }\r\n}\r\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */\r\nfunction blockRedirectInIframe(allowRedirectInIframe) {\r\n    if (isInIframe() && !allowRedirectInIframe) {\r\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\r\n        throw createBrowserAuthError(redirectInIframe);\r\n    }\r\n}\r\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */\r\nfunction blockAcquireTokenInPopups() {\r\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\r\n    if (isInPopup()) {\r\n        throw createBrowserAuthError(blockNestedPopups);\r\n    }\r\n}\r\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */\r\nfunction blockNonBrowserEnvironment() {\r\n    if (typeof window === \"undefined\") {\r\n        throw createBrowserAuthError(nonBrowserEnvironment);\r\n    }\r\n}\r\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */\r\nfunction blockAPICallsBeforeInitialize(initialized) {\r\n    if (!initialized) {\r\n        throw createBrowserAuthError(uninitializedPublicClientApplication);\r\n    }\r\n}\r\n/**\r\n * Helper to validate app environment before making an auth request\r\n * @param initialized\r\n */\r\nfunction preflightCheck(initialized) {\r\n    // Block request if not in browser environment\r\n    blockNonBrowserEnvironment();\r\n    // Block auth requests inside a hidden iframe\r\n    blockReloadInHiddenIframes();\r\n    // Block redirectUri opened in a popup from calling MSAL APIs\r\n    blockAcquireTokenInPopups();\r\n    // Block token acquisition before initialize has been called\r\n    blockAPICallsBeforeInitialize(initialized);\r\n}\r\n/**\r\n * Helper to validate app enviornment before making redirect request\r\n * @param initialized\r\n * @param config\r\n */\r\nfunction redirectPreflightCheck(initialized, config) {\r\n    preflightCheck(initialized);\r\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\r\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\r\n    if (config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&\r\n        !config.cache.storeAuthStateInCookie) {\r\n        throw createBrowserConfigurationAuthError(inMemRedirectUnavailable);\r\n    }\r\n}\r\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */\r\nfunction preconnect(authority) {\r\n    const link = document.createElement(\"link\");\r\n    link.rel = \"preconnect\";\r\n    link.href = new URL(authority).origin;\r\n    link.crossOrigin = \"anonymous\";\r\n    document.head.appendChild(link);\r\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\r\n    window.setTimeout(() => {\r\n        try {\r\n            document.head.removeChild(link);\r\n        }\r\n        catch { }\r\n    }, 10000); // 10s Timeout\r\n}\r\n/**\r\n * Wrapper function that creates a UUID v7 from the current timestamp.\r\n * @returns {string}\r\n */\r\nfunction createGuid() {\r\n    return createNewGuid();\r\n}\n\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, createGuid, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, preflightCheck, redirectPreflightCheck, replaceHash };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { timedOut } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass NavigationClient {\r\n    /**\r\n     * Navigates to other pages within the same web application\r\n     * @param url\r\n     * @param options\r\n     */\r\n    navigateInternal(url, options) {\r\n        return NavigationClient.defaultNavigateWindow(url, options);\r\n    }\r\n    /**\r\n     * Navigates to other pages outside the web application i.e. the Identity Provider\r\n     * @param url\r\n     * @param options\r\n     */\r\n    navigateExternal(url, options) {\r\n        return NavigationClient.defaultNavigateWindow(url, options);\r\n    }\r\n    /**\r\n     * Default navigation implementation invoked by the internal and external functions\r\n     * @param url\r\n     * @param options\r\n     */\r\n    static defaultNavigateWindow(url, options) {\r\n        if (options.noHistory) {\r\n            window.location.replace(url); // CodeQL [SM03712] Application owner controls the URL. User can't change it.\r\n        }\r\n        else {\r\n            window.location.assign(url); // CodeQL [SM03712] Application owner controls the URL. User can't change it.\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                reject(createBrowserAuthError(timedOut, \"failed_to_redirect\"));\r\n            }, options.timeout);\r\n        });\r\n    }\r\n}\n\nexport { NavigationClient };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst EventType = {\r\n    INITIALIZE_START: \"msal:initializeStart\",\r\n    INITIALIZE_END: \"msal:initializeEnd\",\r\n    ACCOUNT_ADDED: \"msal:accountAdded\",\r\n    ACCOUNT_REMOVED: \"msal:accountRemoved\",\r\n    ACTIVE_ACCOUNT_CHANGED: \"msal:activeAccountChanged\",\r\n    LOGIN_START: \"msal:loginStart\",\r\n    LOGIN_SUCCESS: \"msal:loginSuccess\",\r\n    LOGIN_FAILURE: \"msal:loginFailure\",\r\n    ACQUIRE_TOKEN_START: \"msal:acquireTokenStart\",\r\n    ACQUIRE_TOKEN_SUCCESS: \"msal:acquireTokenSuccess\",\r\n    ACQUIRE_TOKEN_FAILURE: \"msal:acquireTokenFailure\",\r\n    ACQUIRE_TOKEN_NETWORK_START: \"msal:acquireTokenFromNetworkStart\",\r\n    SSO_SILENT_START: \"msal:ssoSilentStart\",\r\n    SSO_SILENT_SUCCESS: \"msal:ssoSilentSuccess\",\r\n    SSO_SILENT_FAILURE: \"msal:ssoSilentFailure\",\r\n    ACQUIRE_TOKEN_BY_CODE_START: \"msal:acquireTokenByCodeStart\",\r\n    ACQUIRE_TOKEN_BY_CODE_SUCCESS: \"msal:acquireTokenByCodeSuccess\",\r\n    ACQUIRE_TOKEN_BY_CODE_FAILURE: \"msal:acquireTokenByCodeFailure\",\r\n    HANDLE_REDIRECT_START: \"msal:handleRedirectStart\",\r\n    HANDLE_REDIRECT_END: \"msal:handleRedirectEnd\",\r\n    POPUP_OPENED: \"msal:popupOpened\",\r\n    LOGOUT_START: \"msal:logoutStart\",\r\n    LOGOUT_SUCCESS: \"msal:logoutSuccess\",\r\n    LOGOUT_FAILURE: \"msal:logoutFailure\",\r\n    LOGOUT_END: \"msal:logoutEnd\",\r\n    RESTORE_FROM_BFCACHE: \"msal:restoreFromBFCache\",\r\n    BROKER_CONNECTION_ESTABLISHED: \"msal:brokerConnectionEstablished\",\r\n};\n\nexport { EventType };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport { EventType } from './EventType.mjs';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass EventMessageUtils {\r\n    /**\r\n     * Gets interaction status from event message\r\n     * @param message\r\n     * @param currentStatus\r\n     */\r\n    static getInteractionStatusFromEvent(message, currentStatus) {\r\n        switch (message.eventType) {\r\n            case EventType.LOGIN_START:\r\n                return InteractionStatus.Login;\r\n            case EventType.SSO_SILENT_START:\r\n                return InteractionStatus.SsoSilent;\r\n            case EventType.ACQUIRE_TOKEN_START:\r\n                if (message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup) {\r\n                    return InteractionStatus.AcquireToken;\r\n                }\r\n                break;\r\n            case EventType.HANDLE_REDIRECT_START:\r\n                return InteractionStatus.HandleRedirect;\r\n            case EventType.LOGOUT_START:\r\n                return InteractionStatus.Logout;\r\n            case EventType.SSO_SILENT_SUCCESS:\r\n            case EventType.SSO_SILENT_FAILURE:\r\n                if (currentStatus &&\r\n                    currentStatus !== InteractionStatus.SsoSilent) {\r\n                    // Prevent this event from clearing any status other than ssoSilent\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGOUT_END:\r\n                if (currentStatus &&\r\n                    currentStatus !== InteractionStatus.Logout) {\r\n                    // Prevent this event from clearing any status other than logout\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.HANDLE_REDIRECT_END:\r\n                if (currentStatus &&\r\n                    currentStatus !== InteractionStatus.HandleRedirect) {\r\n                    // Prevent this event from clearing any status other than handleRedirect\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGIN_SUCCESS:\r\n            case EventType.LOGIN_FAILURE:\r\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\r\n            case EventType.ACQUIRE_TOKEN_FAILURE:\r\n            case EventType.RESTORE_FROM_BFCACHE:\r\n                if (message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup) {\r\n                    if (currentStatus &&\r\n                        currentStatus !== InteractionStatus.Login &&\r\n                        currentStatus !== InteractionStatus.AcquireToken) {\r\n                        // Prevent this event from clearing any status other than login or acquireToken\r\n                        break;\r\n                    }\r\n                    return InteractionStatus.None;\r\n                }\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}\n\nexport { EventMessageUtils };\n\n","/*! @azure/msal-browser v4.14.0 2025-07-01 */\n'use strict';\nimport * as BrowserUtils from './utils/BrowserUtils.mjs';\nexport { BrowserUtils };\nexport { PublicClientApplication, createNestablePublicClientApplication, createStandardPublicClientApplication } from './app/PublicClientApplication.mjs';\nexport { PublicClientNext } from './app/PublicClientNext.mjs';\nexport { DEFAULT_IFRAME_TIMEOUT_MS } from './config/Configuration.mjs';\nexport { ApiId, BrowserCacheLocation, CacheLookupPolicy, InteractionStatus, InteractionType, WrapperSKU } from './utils/BrowserConstants.mjs';\nexport { BrowserAuthError, BrowserAuthErrorMessage } from './error/BrowserAuthError.mjs';\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage } from './error/BrowserConfigurationAuthError.mjs';\nexport { stubbedPublicClientApplication } from './app/IPublicClientApplication.mjs';\nexport { NavigationClient } from './navigation/NavigationClient.mjs';\nexport { MemoryStorage } from './cache/MemoryStorage.mjs';\nexport { LocalStorage } from './cache/LocalStorage.mjs';\nexport { SessionStorage } from './cache/SessionStorage.mjs';\nexport { EventMessageUtils } from './event/EventMessage.mjs';\nexport { EventType } from './event/EventType.mjs';\nexport { EventHandler } from './event/EventHandler.mjs';\nexport { SignedHttpRequest } from './crypto/SignedHttpRequest.mjs';\nexport { BrowserPerformanceClient } from './telemetry/BrowserPerformanceClient.mjs';\nexport { BrowserPerformanceMeasurement } from './telemetry/BrowserPerformanceMeasurement.mjs';\nexport { AccountEntity, AuthError, AuthErrorCodes, AuthErrorMessage, AuthenticationHeaderParser, AuthenticationScheme, AzureCloudInstance, ClientAuthError, ClientAuthErrorCodes, ClientAuthErrorMessage, ClientConfigurationError, ClientConfigurationErrorCodes, ClientConfigurationErrorMessage, InteractionRequiredAuthError, InteractionRequiredAuthErrorCodes, InteractionRequiredAuthErrorMessage, JsonWebTokenTypes, LogLevel, Logger, OIDC_DEFAULT_SCOPES, PerformanceEvents, PromptValue, ProtocolMode, ServerError, ServerResponseType, StringUtils, StubPerformanceClient, UrlString } from '@azure/msal-common/browser';\nexport { version } from './packageMetadata.mjs';\nexport { isPlatformBrokerAvailable } from './broker/nativeBroker/PlatformAuthProvider.mjs';\nimport * as BrowserAuthErrorCodes from './error/BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\nimport * as BrowserConfigurationAuthErrorCodes from './error/BrowserConfigurationAuthErrorCodes.mjs';\nexport { BrowserConfigurationAuthErrorCodes };\n\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, Component, NgModule } from '@angular/core';\nimport { InteractionStatus, EventMessageUtils, WrapperSKU, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { ReplaySubject, Subject, BehaviorSubject, from, of, EMPTY } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport * as i4 from '@angular/router';\n\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-angular\";\r\nconst version = \"4.0.14\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\r\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\r\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\r\nconst MSAL_BROADCAST_CONFIG = new InjectionToken(\"MSAL_BROADCAST_CONFIG\");\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalBroadcastService {\r\n    constructor(msalInstance, msalBroadcastConfig) {\r\n        this.msalInstance = msalInstance;\r\n        this.msalBroadcastConfig = msalBroadcastConfig;\r\n        // Make _msalSubject a ReplaySubject if configured to replay past events\r\n        if (this.msalBroadcastConfig &&\r\n            this.msalBroadcastConfig.eventsToReplay > 0) {\r\n            this.msalInstance\r\n                .getLogger()\r\n                .clone(name, version)\r\n                .verbose(`BroadcastService - eventsToReplay set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\r\n            this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\r\n        }\r\n        else {\r\n            // Defaults to _msalSubject being a Subject\r\n            this._msalSubject = new Subject();\r\n        }\r\n        this.msalSubject$ = this._msalSubject.asObservable();\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\r\n            if (status !== null) {\r\n                this.msalInstance\r\n                    .getLogger()\r\n                    .clone(name, version)\r\n                    .verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Resets inProgress state to None\r\n     */\r\n    resetInProgressEvent() {\r\n        if (this._inProgress.value === InteractionStatus.Startup) {\r\n            this._inProgress.next(InteractionStatus.None);\r\n        }\r\n    }\r\n}\r\nMsalBroadcastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalBroadcastService, deps: [{ token: MSAL_INSTANCE }, { token: MSAL_BROADCAST_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalBroadcastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalBroadcastService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalBroadcastService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INSTANCE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MSAL_BROADCAST_CONFIG]\r\n                }] }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalService {\r\n    constructor(instance, location, injector) {\r\n        this.instance = instance;\r\n        this.location = location;\r\n        this.injector = injector;\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n    initialize() {\r\n        return from(this.instance.initialize());\r\n    }\r\n    acquireTokenPopup(request) {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request) {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest) {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash) {\r\n        return from(this.instance\r\n            .initialize()\r\n            .then(() => this.instance.handleRedirectPromise(hash || this.redirectHash))\r\n            .finally(() => {\r\n            // update inProgress state to none\r\n            this.injector.get(MsalBroadcastService).resetInProgressEvent();\r\n        }));\r\n    }\r\n    loginPopup(request) {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request) {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    // @deprecated: Use logoutRedirect or logoutPopup\r\n    logout(logoutRequest) {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest) {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest) {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request) {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger() {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger) {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n}\r\nMsalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalService, deps: [{ token: MSAL_INSTANCE }, { token: i3.Location }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INSTANCE]\r\n                }] }, { type: i3.Location }, { type: i0.Injector }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalGuard {\r\n    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\r\n        this.msalGuardConfig = msalGuardConfig;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.router = router;\r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url\r\n     */\r\n    parseUrl(url) {\r\n        return this.router.parseUrl(url);\r\n    }\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path) {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    loginInteractively(state) {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : { ...this.msalGuardConfig.authRequest };\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup(authRequest).pipe(map((response) => {\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                this.authService.instance.setActiveAccount(response.account);\r\n                return true;\r\n            }));\r\n        }\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService\r\n            .loginRedirect({\r\n            redirectStartPage,\r\n            ...authRequest,\r\n        })\r\n            .pipe(map(() => false));\r\n    }\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\r\n    activateHelper(state) {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup &&\r\n            this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         */\r\n        if (typeof window !== \"undefined\") {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) &&\r\n                BrowserUtils.isInIframe() &&\r\n                !this.authService.instance.getConfiguration().system\r\n                    .allowRedirectInIframe) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n                return of(false);\r\n            }\r\n        }\r\n        else {\r\n            this.authService\r\n                .getLogger()\r\n                .info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\r\n            return of(true);\r\n        }\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n        return this.authService.initialize().pipe(concatMap(() => {\r\n            return this.authService.handleRedirectObservable();\r\n        }), concatMap(() => {\r\n            if (!this.authService.instance.getAllAccounts().length) {\r\n                if (state) {\r\n                    this.authService\r\n                        .getLogger()\r\n                        .verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                    return this.loginInteractively(state);\r\n                }\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                return of(false);\r\n            }\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Guard - at least 1 account exists, can activate or load\");\r\n            // Prevent navigating the app to /#code= or /code=\r\n            if (state) {\r\n                /*\r\n                 * Path routing:\r\n                 * state.url: /#code=...\r\n                 * state.root.fragment: code=...\r\n                 */\r\n                /*\r\n                 * Hash routing:\r\n                 * state.url: /code\r\n                 * state.root.fragment: null\r\n                 */\r\n                const urlContainsCode = this.includesCode(state.url);\r\n                const fragmentContainsCode = !!state.root &&\r\n                    !!state.root.fragment &&\r\n                    this.includesCode(`#${state.root.fragment}`);\r\n                const hashRouting = this.location.prepareExternalUrl(state.url).indexOf(\"#\") === 0;\r\n                // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\r\n                if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\r\n                    this.authService\r\n                        .getLogger()\r\n                        .info(\"Guard - Hash contains known code response, stopping navigation.\");\r\n                    // Path routing (navigate to current path without hash)\r\n                    if (currentPath.indexOf(\"#\") > -1) {\r\n                        return of(this.parseUrl(this.location.path()));\r\n                    }\r\n                    // Hash routing (navigate to root path)\r\n                    return of(this.parseUrl(\"\"));\r\n                }\r\n            }\r\n            return of(true);\r\n        }), catchError((error) => {\r\n            this.authService\r\n                .getLogger()\r\n                .error(\"Guard - error while logging in, unable to activate\");\r\n            this.authService\r\n                .getLogger()\r\n                .errorPii(`Guard - error: ${error.message}`);\r\n            /**\r\n             * If a loginFailedRoute is set, checks to see if state is passed before returning route\r\n             */\r\n            if (this.loginFailedRoute && state) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                return of(this.loginFailedRoute);\r\n            }\r\n            return of(false);\r\n        }));\r\n    }\r\n    includesCode(path) {\r\n        return ((path.lastIndexOf(\"/code\") > -1 &&\r\n            path.lastIndexOf(\"/code\") === path.length - \"/code\".length) || // path.endsWith(\"/code\")\r\n            path.indexOf(\"#code=\") > -1 ||\r\n            path.indexOf(\"&code=\") > -1);\r\n    }\r\n    canActivate(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canActivateChild(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canMatch() {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        return this.activateHelper();\r\n    }\r\n}\r\nMsalGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalGuard, deps: [{ token: MSAL_GUARD_CONFIG }, { token: MsalBroadcastService }, { token: MsalService }, { token: i3.Location }, { token: i4.Router }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalGuard });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalGuard, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_GUARD_CONFIG]\r\n                }] }, { type: MsalBroadcastService }, { type: MsalService }, { type: i3.Location }, { type: i4.Router }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalInterceptor {\r\n    constructor(msalInterceptorConfig, authService, location, msalBroadcastService, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    document) {\r\n        this.msalInterceptorConfig = msalInterceptorConfig;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this._document = document;\r\n    }\r\n    intercept(req, // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    next\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup &&\r\n            this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n        // Sets account as active account or first account\r\n        let account;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        }\r\n        else {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, {\r\n                account: account,\r\n            })\r\n            : { ...this.msalInterceptorConfig.authRequest, account };\r\n        this.authService\r\n            .getLogger()\r\n            .info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService\r\n            .getLogger()\r\n            .infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n        return this.acquireToken(authRequest, scopes, account).pipe(switchMap((result) => {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Interceptor - setting authorization headers\");\r\n            const headers = req.headers.set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n            const requestClone = req.clone({ headers });\r\n            return next.handle(requestClone);\r\n        }));\r\n    }\r\n    /**\r\n     * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @param account Account\r\n     * @returns Authentication result\r\n     */\r\n    acquireToken(authRequest, scopes, account) {\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService\r\n            .acquireTokenSilent({ ...authRequest, scopes, account })\r\n            .pipe(catchError(() => {\r\n            this.authService\r\n                .getLogger()\r\n                .error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n            return this.msalBroadcastService.inProgress$.pipe(take(1), switchMap((status) => {\r\n                if (status === InteractionStatus.None) {\r\n                    return this.acquireTokenInteractively(authRequest, scopes);\r\n                }\r\n                return this.msalBroadcastService.inProgress$.pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\r\n            }));\r\n        }), switchMap((result) => {\r\n            if (!result.accessToken) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                return this.msalBroadcastService.inProgress$.pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\r\n            }\r\n            return of(result);\r\n        }));\r\n    }\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    acquireTokenInteractively(authRequest, scopes) {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({ ...authRequest, scopes });\r\n        }\r\n        this.authService\r\n            .getLogger()\r\n            .verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({\r\n            ...authRequest,\r\n            scopes,\r\n            redirectStartPage,\r\n        });\r\n        return EMPTY;\r\n    }\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    getScopesForEndpoint(endpoint, httpMethod) {\r\n        this.authService\r\n            .getLogger()\r\n            .verbose(\"Interceptor - getting scopes for endpoint\");\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n        if (matchingProtectedResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources, httpMethod);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\r\n        const matchingResources = [];\r\n        protectedResourcesEndpoints.forEach((key) => {\r\n            const normalizedKey = this.location.normalize(key);\r\n            // Get url components\r\n            const absoluteKey = this.getAbsoluteUrl(normalizedKey);\r\n            const keyComponents = new URL(absoluteKey);\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new URL(absoluteEndpoint);\r\n            if (this.checkUrlComponents(keyComponents, endpointComponents)) {\r\n                matchingResources.push(key);\r\n            }\r\n        });\r\n        return matchingResources;\r\n    }\r\n    /**\r\n     * Compares URL segments between key and endpoint\r\n     * @param key\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    checkUrlComponents(keyComponents, endpointComponents) {\r\n        // URL properties from https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n        const urlProperties = [\"protocol\", \"host\", \"pathname\", \"search\", \"hash\"];\r\n        for (const property of urlProperties) {\r\n            if (keyComponents[property]) {\r\n                const decodedInput = decodeURIComponent(keyComponents[property]);\r\n                if (!StringUtils.matchPattern(decodedInput, endpointComponents[property])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\r\n    getAbsoluteUrl(url) {\r\n        const link = this._document.createElement(\"a\");\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\r\n    matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\r\n        const allMatchedScopes = [];\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach((matchedEndpoint) => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n            methodAndScopesArray.forEach((entry) => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === \"string\") {\r\n                    scopesForEndpoint.push(entry);\r\n                }\r\n                else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method\r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        }\r\n                        else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nMsalInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalInterceptor, deps: [{ token: MSAL_INTERCEPTOR_CONFIG }, { token: MsalService }, { token: i3.Location }, { token: MsalBroadcastService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INTERCEPTOR_CONFIG]\r\n                }] }, { type: MsalService }, { type: i3.Location }, { type: MsalBroadcastService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to\r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\nclass MsalRedirectComponent {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    ngOnInit() {\r\n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n}\r\nMsalRedirectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalRedirectComponent, deps: [{ token: MsalService }], target: i0.ɵɵFactoryTarget.Component });\r\nMsalRedirectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.10\", type: MsalRedirectComponent, selector: \"app-redirect\", ngImport: i0, template: \"\", isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalRedirectComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: \"app-redirect\",\r\n                    template: \"\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: MsalService }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalModule {\r\n    static forRoot(msalInstance, guardConfig, interceptorConfig) {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance,\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig,\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig,\r\n                },\r\n                MsalService,\r\n            ],\r\n        };\r\n    }\r\n}\r\nMsalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMsalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalModule, declarations: [MsalRedirectComponent], imports: [CommonModule] });\r\nMsalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalModule, providers: [MsalGuard, MsalBroadcastService], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [MsalRedirectComponent],\r\n                    imports: [CommonModule],\r\n                    providers: [MsalGuard, MsalBroadcastService],\r\n                }]\r\n        }] });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/performance.md\r\n */\r\nclass MsalCustomNavigationClient extends NavigationClient {\r\n    constructor(authService, router, location) {\r\n        super();\r\n        this.authService = authService;\r\n        this.router = router;\r\n        this.location = location;\r\n    }\r\n    async navigateInternal(url, options) {\r\n        this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\r\n        this.authService\r\n            .getLogger()\r\n            .verbose(\"MsalCustomNavigationClient - navigating\");\r\n        this.authService\r\n            .getLogger()\r\n            .verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n        // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n        if (options.noHistory) {\r\n            return super.navigateInternal(url, options);\r\n        }\r\n        else {\r\n            // Normalizing newUrl if no query string\r\n            const urlComponents = new UrlString(url).getUrlComponents();\r\n            const newUrl = urlComponents.QueryString\r\n                ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}`\r\n                : this.location.normalize(urlComponents.AbsolutePath);\r\n            await this.router.navigateByUrl(newUrl, {\r\n                replaceUrl: options.noHistory,\r\n            });\r\n        }\r\n        return Promise.resolve(options.noHistory);\r\n    }\r\n}\r\nMsalCustomNavigationClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalCustomNavigationClient, deps: [{ token: MsalService }, { token: i4.Router }, { token: i3.Location }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalCustomNavigationClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalCustomNavigationClient });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MsalCustomNavigationClient, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: MsalService }, { type: i4.Router }, { type: i3.Location }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };\n\n","import { Injectable } from '@angular/core';\r\nimport { MsalService } from '@azure/msal-angular';\r\nimport { UserProfile } from '../pages/perfil/user-profile.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  constructor(private msalService: MsalService) {}\r\n\r\n  getActiveAccount() {\r\n    return this.msalService.instance.getActiveAccount();\r\n  }\r\n\r\ngetUserProfile(): UserProfile | null {\r\n  const account = this.getActiveAccount();\r\n  if (account && account.idTokenClaims) {\r\n    const claims = account.idTokenClaims as any;\r\n\r\n    return {\r\n      id: -1,\r\n      fullName: claims['name'] ?? '',\r\n      email: claims['emails']?.[0] ?? claims['email'] ?? '',\r\n      role: claims['role'] ?? 'Operador',\r\n      phone: claims['phone_number'] ?? '',\r\n      position: claims['position'] ?? '',\r\n      company: claims['company'] ?? '',\r\n      location: claims['location'] ?? 'Chile',\r\n      biography: claims['bio'] ?? '',\r\n      avatarUrl: claims['picture'] ?? 'https://via.placeholder.com/120',\r\n      username: claims['preferred_username'] ?? claims['unique_name'] ?? ''\r\n    };\r\n  }\r\n  return null;\r\n}\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthService } from '../../guards/auth.service';\r\nimport { UserProfile } from './user-profile.model';\r\n\r\ninterface Estadistica {\r\n  label: string;\r\n  value: number;\r\n}\r\n\r\ninterface Actividad {\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-perfil',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, FormsModule],\r\n  templateUrl: './perfil.html',\r\n  styleUrls: ['./perfil.css']\r\n})\r\nexport class PerfilComponent implements OnInit {\r\n  user: UserProfile = {\r\n    id: -1,\r\n    username: '',\r\n    fullName: '',\r\n    email: '',\r\n    role: '',\r\n    phone: '',\r\n    position: '',\r\n    company: '',\r\n    location: '',\r\n    biography: '',\r\n    avatarUrl: 'https://via.placeholder.com/120'\r\n  };\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const profile = this.authService.getUserProfile();\r\n    if (profile) {\r\n      this.user = profile;\r\n    }\r\n  }\r\n\r\n  stats: Estadistica[] = [\r\n    { label: 'Obras gestionadas', value: 12 },\r\n    { label: 'Registros creados', value: 347 },\r\n    { label: 'Reportes generados', value: 28 },\r\n    { label: 'Días activo', value: 156 }\r\n  ];\r\n\r\n  activities: Actividad[] = [\r\n    {\r\n      title: 'Registro de residuos',\r\n      description: 'Registró 15 m³ de escombros en Torre Norte',\r\n      date: '2024-06-15 14:30'\r\n    },\r\n    {\r\n      title: 'Reporte generado',\r\n      description: 'Generó reporte mensual de eficiencia',\r\n      date: '2024-06-14 09:15'\r\n    },\r\n    {\r\n      title: 'Nueva obra creada',\r\n      description: 'Registró \"Edificio Corporativo\" en el sistema',\r\n      date: '2024-06-13 16:45'\r\n    }\r\n  ];\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { PerfilComponent } from './perfil';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../guards/auth.service';\r\nimport { UserProfile } from './user-profile.model';\r\n\r\ndescribe('PerfilComponent', () => {\r\n  let component: PerfilComponent;\r\n  let fixture: ComponentFixture<PerfilComponent>;\r\n  let mockRouter: jasmine.SpyObj<Router>;\r\n  let mockAuthService: jasmine.SpyObj<AuthService>;\r\n\r\n  const mockUser: UserProfile = {\r\n    id: 1,\r\n    username: 'admin',\r\n    fullName: 'Administrador General',\r\n    email: 'admin@ecoconstruct.com',\r\n    role: 'Admin',\r\n    phone: '123456789',\r\n    position: 'Gerente de Proyecto',\r\n    company: 'EcoConstruct',\r\n    location: 'Santiago, Chile',\r\n    biography: 'Responsable de supervisar la operación general.',\r\n    avatarUrl: 'https://via.placeholder.com/120'\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\r\n    mockAuthService = jasmine.createSpyObj('AuthService', ['getUserProfile']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [PerfilComponent],\r\n      providers: [\r\n        { provide: Router, useValue: mockRouter },\r\n        { provide: AuthService, useValue: mockAuthService }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PerfilComponent);\r\n    component = fixture.componentInstance;\r\n  });\r\n\r\n  it('debería crearse correctamente', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('debería cargar perfil de usuario en ngOnInit si existe', () => {\r\n    mockAuthService.getUserProfile.and.returnValue(mockUser);\r\n\r\n    component.ngOnInit();\r\n\r\n    expect(component.user).toEqual(mockUser);\r\n    expect(mockAuthService.getUserProfile).toHaveBeenCalled();\r\n  });\r\n\r\n  it('no debería modificar el usuario si no hay perfil en AuthService', () => {\r\n    mockAuthService.getUserProfile.and.returnValue(null);\r\n\r\n    component.ngOnInit();\r\n\r\n    expect(component.user.id).toBe(-1); // valor por defecto\r\n    expect(mockAuthService.getUserProfile).toHaveBeenCalled();\r\n  });\r\n\r\n  it('debería contener estadísticas predefinidas', () => {\r\n    expect(component.stats.length).toBe(4);\r\n    expect(component.stats[0].label).toBe('Obras gestionadas');\r\n  });\r\n\r\n  it('debería contener actividades recientes', () => {\r\n    expect(component.activities.length).toBe(3);\r\n    expect(component.activities[0].title).toBe('Registro de residuos');\r\n  });\r\n\r\n  it('logout debería limpiar el storage y redirigir al login', () => {\r\n    spyOn(localStorage, 'clear');\r\n    spyOn(sessionStorage, 'clear');\r\n\r\n    component.logout();\r\n\r\n    expect(localStorage.clear).toHaveBeenCalled();\r\n    expect(sessionStorage.clear).toHaveBeenCalled();\r\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/login']);\r\n  });\r\n});\r\n"],"mappings":"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","names":["perfil_default","init_perfil","e","noNetworkConnectivity","postRequestFailed","noNetworkConnectivity","postRequestFailed","InteractionType","document","status","AuthService","PerfilComponent","init_perfil"],"x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}