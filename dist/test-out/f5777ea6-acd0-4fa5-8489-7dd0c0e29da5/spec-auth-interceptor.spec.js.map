{
  "version": 3,
  "sources": ["src/app/auth-interceptor.spec.ts", "src/app/auth-interceptor.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HTTP_INTERCEPTORS\r\n} from '@angular/common/http';\r\nimport { AuthInterceptor } from './auth-interceptor';\r\nimport { of } from 'rxjs';\r\n\r\ndescribe('AuthInterceptor', () => {\r\n  let interceptor: AuthInterceptor;\r\n\r\n  const dummyToken = 'eyJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NTE2Nzc2NzUsIm5iZiI6MTc1MTY3NDA3NSwidmVyIjoiMS4wIiwiaXNzIjoiaHR0cHM6Ly9waW5vbGlzby5iMmNsb2dpbi5jb20vNTRiNjQ3MDMtNWNhZS00NWNmLTg4NTItZWU2MWNiNmQyNWY4L3YyLjAvIiwic3ViIjoiNWIyOTc5YmQtNGQ2Zi00ZTI2LWE5ZTYtMDliZDI5NDQ1NTI5IiwiYXVkIjoiODk5NTQ2MDgtY2YxMi00NzE5LTg3OTItNTQ2OGFkNDJjYmZkIiwibm9uY2UiOiJkZWZhdWx0Tm9uY2UiLCJpYXQiOjE3NTE2NzQwNzUsImF1dGhfdGltZSI6MTc1MTY3NDA3NSwiZ2l2ZW5fbmFtZSI6IlNlYmFzdGlhbiIsImZhbWlseV9uYW1lIjoiTXVzcmUiLCJ0ZnAiOiJCMkNfMV9sb2dpbiJ9.dnKaRU3krOtVMlLbqXKcMfJRc3hHZCXXPdvzI5tTY19MF9kFH03qHA-p1ezX8IKuZDzuvcu2MDaL-Qn5DeMqoJWN38JRd6AqLawQBQkHhWqBUC7IvILVQwsJS0Qs8InyszSTZXIJ-LcMLoztUqU_jHsPlDAfNeiN6QYofFz7Kv4ShRo_jS1Edc48Iru7tjHPZP24gIuSakoIwxhESuv8iCrFUit958sHgYdSoHIIypRWpGytF3y2h0rBNVK69qxt06P9lrZGF4o7pk7DAJClLM93r2fjaNjJDKAZ9vLsh7kPL-M0m2bUR-daLmE0Hb9OgxUGqIw2PEFwY1EURuX3yQ';\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        AuthInterceptor,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    });\r\n\r\n    interceptor = TestBed.inject(AuthInterceptor);\r\n  });\r\n\r\n  it('debería agregar el token de autorización al header', (done) => {\r\n    const mockRequest = new HttpRequest('GET', '/api/test');\r\n    \r\n    const mockHandler: HttpHandler = {\r\n      handle: (req: HttpRequest<any>) => {\r\n        expect(req.headers.has('Authorization')).toBeTrue();\r\n        expect(req.headers.get('Authorization')).toBe(`Bearer ${dummyToken}`);\r\n        done();\r\n        return of({} as HttpEvent<any>);\r\n      }\r\n    };\r\n\r\n    interceptor.intercept(mockRequest, mockHandler).subscribe();\r\n  });\r\n\r\n  it('debería clonar correctamente la solicitud original', (done) => {\r\n    const request = new HttpRequest('POST', '/api/submit', { data: 'test' });\r\n\r\n    const mockHandler: HttpHandler = {\r\n      handle: (req: HttpRequest<any>) => {\r\n        expect(req.method).toBe('POST');\r\n        expect(req.url).toBe('/api/submit');\r\n        expect(req.body).toEqual({ data: 'test' });\r\n\r\n        expect(req.headers.get('Authorization')).toBe(`Bearer ${dummyToken}`);\r\n        done();\r\n        return of({} as HttpEvent<any>);\r\n      }\r\n    };\r\n\r\n    interceptor.intercept(request, mockHandler).subscribe();\r\n  });\r\n});\r\n", "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NTE2Nzc2NzUsIm5iZiI6MTc1MTY3NDA3NSwidmVyIjoiMS4wIiwiaXNzIjoiaHR0cHM6Ly9waW5vbGlzby5iMmNsb2dpbi5jb20vNTRiNjQ3MDMtNWNhZS00NWNmLTg4NTItZWU2MWNiNmQyNWY4L3YyLjAvIiwic3ViIjoiNWIyOTc5YmQtNGQ2Zi00ZTI2LWE5ZTYtMDliZDI5NDQ1NTI5IiwiYXVkIjoiODk5NTQ2MDgtY2YxMi00NzE5LTg3OTItNTQ2OGFkNDJjYmZkIiwibm9uY2UiOiJkZWZhdWx0Tm9uY2UiLCJpYXQiOjE3NTE2NzQwNzUsImF1dGhfdGltZSI6MTc1MTY3NDA3NSwiZ2l2ZW5fbmFtZSI6IlNlYmFzdGlhbiIsImZhbWlseV9uYW1lIjoiTXVzcmUiLCJ0ZnAiOiJCMkNfMV9sb2dpbiJ9.dnKaRU3krOtVMlLbqXKcMfJRc3hHZCXXPdvzI5tTY19MF9kFH03qHA-p1ezX8IKuZDzuvcu2MDaL-Qn5DeMqoJWN38JRd6AqLawQBQkHhWqBUC7IvILVQwsJS0Qs8InyszSTZXIJ-LcMLoztUqU_jHsPlDAfNeiN6QYofFz7Kv4ShRo_jS1Edc48Iru7tjHPZP24gIuSakoIwxhESuv8iCrFUit958sHgYdSoHIIypRWpGytF3y2h0rBNVK69qxt06P9lrZGF4o7pk7DAJClLM93r2fjaNjJDKAZ9vLsh7kPL-M0m2bUR-daLmE0Hb9OgxUGqIw2PEFwY1EURuX3yQ';\r\n\r\n    const authReq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AACA;;;;ACDA;AAUO,IAAM,kBAAN,MAAMA,iBAAe;EAC1B,UAAU,KAAuB,MAAiB;AAChD,UAAM,QAAQ;AAEd,UAAM,UAAU,IAAI,MAAM;MACxB,YAAY;QACV,eAAe,UAAU,KAAK;;KAEjC;AAED,WAAO,KAAK,OAAO,OAAO;EAC5B;;AAXW,kBAAe,WAAA;EAD3B,WAAU;GACE,eAAe;;;ADF5B;AAEA,SAAS,mBAAmB,MAAK;AAC/B,MAAI;AAEJ,QAAM,aAAa;AAEnB,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,WAAW;QACT;QACA;UACE,SAAS;UACT,UAAU;UACV,OAAO;;;KAGZ;AAED,kBAAc,QAAQ,OAAO,eAAe;EAC9C,CAAC;AAED,KAAG,4DAAsD,CAAC,SAAQ;AAChE,UAAM,cAAc,IAAI,YAAY,OAAO,WAAW;AAEtD,UAAM,cAA2B;MAC/B,QAAQ,CAAC,QAAyB;AAChC,eAAO,IAAI,QAAQ,IAAI,eAAe,CAAC,EAAE,SAAQ;AACjD,eAAO,IAAI,QAAQ,IAAI,eAAe,CAAC,EAAE,KAAK,UAAU,UAAU,EAAE;AACpE,aAAI;AACJ,eAAO,GAAG,CAAA,CAAoB;MAChC;;AAGF,gBAAY,UAAU,aAAa,WAAW,EAAE,UAAS;EAC3D,CAAC;AAED,KAAG,yDAAsD,CAAC,SAAQ;AAChE,UAAM,UAAU,IAAI,YAAY,QAAQ,eAAe,EAAE,MAAM,OAAM,CAAE;AAEvE,UAAM,cAA2B;MAC/B,QAAQ,CAAC,QAAyB;AAChC,eAAO,IAAI,MAAM,EAAE,KAAK,MAAM;AAC9B,eAAO,IAAI,GAAG,EAAE,KAAK,aAAa;AAClC,eAAO,IAAI,IAAI,EAAE,QAAQ,EAAE,MAAM,OAAM,CAAE;AAEzC,eAAO,IAAI,QAAQ,IAAI,eAAe,CAAC,EAAE,KAAK,UAAU,UAAU,EAAE;AACpE,aAAI;AACJ,eAAO,GAAG,CAAA,CAAoB;MAChC;;AAGF,gBAAY,UAAU,SAAS,WAAW,EAAE,UAAS;EACvD,CAAC;AACH,CAAC;",
  "names": ["AuthInterceptor"]
}
